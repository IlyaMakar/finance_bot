package main

import (
	"fmt"
	"log"
	"os"
	"os/signal"
	"syscall"
	"time"

	"github.com/IlyaMakar/finance_bot/internal/bot"
	"github.com/IlyaMakar/finance_bot/internal/logger"
	"github.com/IlyaMakar/finance_bot/internal/repository"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"github.com/joho/godotenv"
)

func main() {
	logger.Init()
	defer func() {
		if r := recover(); r != nil {
			logger.LogError("system", fmt.Sprintf("PANIC: %v", r))
		}
	}()

	err := godotenv.Load()
	if err != nil {
		logger.LogError("system", fmt.Sprintf("Error loading .env file: %v", err))
		log.Println(".env —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å")
	}

	token := os.Getenv("TELEGRAM_TOKEN")
	if token == "" {
		logger.LogError("system", "TELEGRAM_TOKEN not set")
		log.Fatalf("TELEGRAM_TOKEN –Ω–µ –∑–∞–¥–∞–Ω")
	}

	db, err := repository.NewSQLiteDB("finance.db")
	if err != nil {
		logger.LogError("system", fmt.Sprintf("Failed to connect to DB: %v", err))
		log.Fatalf("–Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ë–î: %v", err)
	}
	defer func() {
		if err := db.Close(); err != nil {
			logger.LogError("system", fmt.Sprintf("Error closing DB: %v", err))
		}
	}()

	if err := repository.InitDB(db); err != nil {
		logger.LogError("system", fmt.Sprintf("Failed to init DB: %v", err))
		log.Fatalf("–Ω–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ë–î: %v", err)
	}

	repo := repository.NewRepository(db)

	botInstance, err := bot.NewBot(token, repo)
	if err != nil {
		logger.LogError("system", fmt.Sprintf("Failed to create bot: %v", err))
		log.Fatalf("–Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –±–æ—Ç–∞: %v", err)
	}

	go botInstance.Start()
	go startReminder(botInstance, repo, false) // false - –æ–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º, true - —Ç–µ—Å—Ç–æ–≤—ã–π

	quit := make(chan os.Signal, 1)
	signal.Notify(quit, syscall.SIGINT, syscall.SIGTERM)
	logger.LogCommandByID(0, "–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥...")
	<-quit
	logger.LogCommandByID(0, "–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è. –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
	log.Println("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
}

func startReminder(botInstance *bot.Bot, repo *repository.SQLiteRepository, testMode bool) {
	checkInterval := time.Minute
	reminderHour := -1

	if !testMode {
		checkInterval = time.Hour
		reminderHour = 20
	}

	time.Sleep(10 * time.Second)
	sendTestReminder(botInstance, repo, testMode)

	ticker := time.NewTicker(checkInterval)
	defer ticker.Stop()

	for now := range ticker.C {
		if reminderHour >= 0 && now.Hour() != reminderHour {
			continue
		}

		logger.LogCommandByID(0, "–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π...")
		users, err := repo.GetAllUsers()
		if err != nil {
			logger.LogError("system", fmt.Sprintf("Reminder error getting users: %v", err))
			continue
		}

		for _, user := range users {
			enabled, err := repo.GetUserNotificationsEnabled(user.ID)
			if err != nil {
				logger.LogError(user.TelegramID, fmt.Sprintf("Notification check error: %v", err))
				continue
			}

			if !enabled {
				continue
			}

			hasTransactions, err := repo.HasTransactionsToday(user.ID)
			if err != nil {
				logger.LogError(user.TelegramID, fmt.Sprintf("Transaction check error: %v", err))
				continue
			}

			if !hasTransactions {
				logger.LogCommandByID(user.TelegramID, "–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")
				sendReminderMessage(botInstance, user.TelegramID, testMode)
			}
		}
	}
}

func sendTestReminder(botInstance *bot.Bot, repo *repository.SQLiteRepository, testMode bool) {
	if !testMode {
		return
	}

	logger.LogCommandByID(0, "–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π")
	users, err := repo.GetAllUsers()
	if err != nil {
		logger.LogError("system", fmt.Sprintf("Test reminder error getting users: %v", err))
		return
	}

	for _, user := range users {
		logger.LogCommandByID(user.TelegramID, "–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")
		msg := tgbotapi.NewMessage(
			user.TelegramID,
			"üîî <b>–¢–µ—Å—Ç–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ</b>\n\n"+
				"–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.\n"+
				"–†–µ–∞–ª—å–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø—Ä–∏—Ö–æ–¥–∏—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ 20:00, –µ—Å–ª–∏ –≤—ã –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.",
		)
		msg.ParseMode = "HTML"
		botInstance.SendMessage(msg)
	}
}

func sendReminderMessage(botInstance *bot.Bot, chatID int64, testMode bool) {
	message := "üí° <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö</b>\n\n" +
		"–ü—Ä–∏–≤–µ—Ç! –ü–æ—Ö–æ–∂–µ, —Ç—ã —Å–µ–≥–æ–¥–Ω—è –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–ª—è–ª(–∞) –Ω–∏ –æ–¥–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.\n\n" +
		"–ù–µ –∑–∞–±—ã–≤–∞–π –≤–µ—Å—Ç–∏ —É—á–µ—Ç —Å–≤–æ–∏—Ö —Ñ–∏–Ω–∞–Ω—Å–æ–≤ ‚Äî —ç—Ç–æ –ø–æ–º–æ–∂–µ—Ç –ª—É—á—à–µ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å –±—é–¥–∂–µ—Ç!\n\n" +
		"‚ûï –ù–∞–∂–º–∏ \"–î–æ–±–∞–≤–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é\" –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —Å—É–º–º—É —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n" +
		"<code>150 </code>"

	if testMode {
		message = "üîî <b>–¢–ï–°–¢: –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö</b>\n\n" +
			"–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ (–≤ —Ä–∞–±–æ—á–µ–º —Ä–µ–∂–∏–º–µ –ø—Ä–∏—Ö–æ–¥–∏—Ç –≤ 20:00).\n\n" +
			message
	}

	msg := tgbotapi.NewMessage(chatID, message)
	msg.ParseMode = "HTML"
	botInstance.SendMessage(msg)
}
