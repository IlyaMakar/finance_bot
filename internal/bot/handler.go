package bot

import (
	"fmt"
	"log"
	"math"
	"strconv"
	"strings"
	"time"

	"github.com/IlyaMakar/finance_bot/internal/logger"
	"github.com/IlyaMakar/finance_bot/internal/repository"
	"github.com/IlyaMakar/finance_bot/internal/service"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

const (
	CallbackRenameCategory = "rename_cat_"
	CallbackDeleteCategory = "delete_cat_"
	CallbackEditCategory   = "edit_cat_"
)

const (
	CallbackToggleNotifications = "toggle_notifs_"
)

type Bot struct {
	bot  *tgbotapi.BotAPI
	repo *repository.SQLiteRepository
}

type UserState struct {
	Step           string
	TempCategoryID int
	TempAmount     float64
	TempComment    string
	TempType       string
}

var userStates = make(map[int64]UserState)

func NewBot(token string, repo *repository.SQLiteRepository) (*Bot, error) {
	botAPI, err := tgbotapi.NewBotAPI(token)
	if err != nil {
		return nil, err
	}

	return &Bot{bot: botAPI, repo: repo}, nil
}

func (b *Bot) startAddTransaction(chatID int64) {
	keyb := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üìà –î–æ—Ö–æ–¥", "type_income"),
			tgbotapi.NewInlineKeyboardButtonData("üìâ –†–∞—Å—Ö–æ–¥", "type_expense"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚óÄÔ∏è –û—Ç–º–µ–Ω–∞", "cancel"),
		),
	)
	msg := tgbotapi.NewMessage(chatID, "üí∏ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏:")
	msg.ReplyMarkup = keyb
	b.send(chatID, msg)
}

func (b *Bot) startAddToSaving(chatID int64, svc *service.FinanceService) {
	savings, err := svc.GetSavings()
	if err != nil || len(savings) == 0 {
		b.send(chatID, tgbotapi.NewMessage(chatID, "üòî –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫–æ–ø–∏–ª–æ–∫ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è. –°–æ–∑–¥–∞–π—Ç–µ –æ–¥–Ω—É –≤ —Ä–∞–∑–¥–µ–ª–µ ¬´–ù–∞–∫–æ–ø–ª–µ–Ω–∏—è¬ª!"))
		return
	}

	var rows [][]tgbotapi.InlineKeyboardButton
	for _, s := range savings {
		rows = append(rows, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(fmt.Sprintf("üíµ %s", s.Name), fmt.Sprintf("add_to_saving_%d", s.ID)),
		))
	}
	rows = append(rows, tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("‚óÄÔ∏è –û—Ç–º–µ–Ω–∞", "cancel"),
	))

	msg := tgbotapi.NewMessage(chatID, "üéØ –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ø–∏–ª–∫—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:")
	msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(rows...)
	b.send(chatID, msg)
}

func (b *Bot) createSavingsKeyboard() tgbotapi.InlineKeyboardMarkup {
	return tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚ûï –ù–æ–≤–∞—è –∫–æ–ø–∏–ª–∫–∞", "create_saving"),
			tgbotapi.NewInlineKeyboardButtonData("üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å", "add_to_saving"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "savings_stats"),
			tgbotapi.NewInlineKeyboardButtonData("‚óÄÔ∏è –ù–∞–∑–∞–¥", "main_menu"),
		),
	)
}

func (b *Bot) initBasicCategories(user *repository.User) {
	basicCategories := []struct{ name, typ string }{
		{"üçé –ü—Ä–æ–¥—É–∫—Ç—ã", "expense"},
		{"üöó –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç", "expense"},
		{"üè† –ñ–ö–•", "expense"},
		{"üíº –ó–∞—Ä–ø–ª–∞—Ç–∞", "income"},
		{"üéâ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è", "expense"},
	}

	exists, _ := b.repo.GetCategories(user.ID)
	wrap := map[string]bool{}
	for _, c := range exists {
		wrap[c.Name] = true
	}

	for _, category := range basicCategories {
		if !wrap[category.name] {
			if _, err := b.repo.CreateCategory(user.ID, repository.Category{
				Name: category.name,
				Type: category.typ,
			}); err != nil {
				log.Println("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:", err)
			}
		}
	}
}

func (b *Bot) showSavingTips(chatID int64) {
	tips := `üí° <b>11 –ø—Ä–∏—á–∏–Ω –≤–µ—Å—Ç–∏ —É—á–µ—Ç —Ñ–∏–Ω–∞–Ω—Å–æ–≤</b>

üëã –ü—Ä–∏–≤–µ—Ç! –ó–Ω–∞—é, —É—á–µ—Ç —Ñ–∏–Ω–∞–Ω—Å–æ–≤ –º–æ–∂–µ—Ç –∑–≤—É—á–∞—Ç—å –∫–∞–∫ —á—Ç–æ-—Ç–æ —Å–∫—É—á–Ω–æ–µ, –±—É–¥—Ç–æ –Ω—É–∂–Ω–æ —Å–∏–¥–µ—Ç—å —Å –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–æ–º –∏ –≤–æ—Ä—á–∞—Ç—å –Ω–∞–¥ –∫–∞–∂–¥–æ–π –º–µ–ª–æ—á—å—é. üòÖ –ù–æ –Ω–∞ –¥–µ–ª–µ —ç—Ç–æ –ø—Ä–æ –∫–æ–Ω—Ç—Ä–æ–ª—å, —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –∏ –ø—É—Ç—å –∫ —Ç–≤–æ–∏–º –º–µ—á—Ç–∞–º! –í–æ—Ç 11 –ø—Ä–∏—á–∏–Ω, –ø–æ—á–µ–º—É —É—á–µ—Ç —Ñ–∏–Ω–∞–Ω—Å–æ–≤ ‚Äî —ç—Ç–æ —Ç–≤–æ–π –ª—É—á—à–∏–π –¥—Ä—É–≥:

1. üïµÔ∏è‚Äç‚ôÇÔ∏è <b>–û–±–Ω–∞—Ä—É–∂–∏—Ç—å "—É—Ç–µ—á–∫–∏" –±—é–¥–∂–µ—Ç–∞</b>
–ú–µ–ª–∫–∏–µ —Ç—Ä–∞—Ç—ã ‚Äî –∫–æ—Ñ–µ, –ø–æ–¥–ø–∏—Å–∫–∏, "–Ω—É–∂–Ω—ã–µ" –≤–µ—â–∏—á–∫–∏ ‚Äî –Ω–µ–∑–∞–º–µ—Ç–Ω–æ —Å—ä–µ–¥–∞—é—Ç –±—é–¥–∂–µ—Ç. –£—á–µ—Ç –ø–æ–∫–∞–∂–µ—Ç, —Å–∫–æ–ª—å–∫–æ —Ç—ã –ø–æ—Ç—Ä–∞—Ç–∏–ª –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É –µ–¥—ã –∏–ª–∏ —Å–ø–æ–Ω—Ç–∞–Ω–Ω—ã–µ –ø–æ–∫—É–ø–∫–∏. –ù–∞–ø—Ä–∏–º–µ—Ä, 5 000 ‚ÇΩ –≤ –º–µ—Å—è—Ü –Ω–∞ –∫–æ—Ñ–µ? –≠—Ç–æ –ø–∞—Ä–∞ –∫—Ä—É—Ç—ã—Ö –∫—Ä–æ—Å—Å–æ–≤–æ–∫ –∑–∞ –≥–æ–¥! –£–∑–Ω–∞–π, –≥–¥–µ —É—Ç–µ–∫–∞—é—Ç –¥–µ–Ω—å–≥–∏, –∏ –Ω–∞–ø—Ä–∞–≤—å –∏—Ö –Ω–∞ —á—Ç–æ-—Ç–æ –≤–∞–∂–Ω–æ–µ. ü•ê

2. ü§î <b>–†–∞–∑–æ–±—Ä–∞—Ç—å—Å—è, –∫—É–¥–∞ —É—Ö–æ–¥—è—Ç –¥–µ–Ω—å–≥–∏</b>
–ö –∫–æ–Ω—Ü—É –º–µ—Å—è—Ü–∞ –∫–∞–∂–µ—Ç—Å—è, —á—Ç–æ –¥–µ–Ω—å–≥–∏ –ø—Ä–æ—Å—Ç–æ –∏—Å—á–µ–∑–ª–∏? –£—á–µ—Ç –¥–∞–µ—Ç —è—Å–Ω—É—é –∫–∞—Ä—Ç–∏–Ω—É: 25% –Ω–∞ –∞—Ä–µ–Ω–¥—É, 15% –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç—ã, 10% –Ω–∞ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è. –¢—ã –≤–∏–¥–∏—à—å, —Å–∫–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω–æ —É—Ö–æ–¥–∏—Ç –Ω–∞ –∫–∞–∂–¥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –∏ –º–æ–∂–µ—à—å –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –±—é–¥–∂–µ—Ç –±–µ–∑ —Å—é—Ä–ø—Ä–∏–∑–æ–≤. –ë–æ–ª—å—à–µ –Ω–∏–∫–∞–∫–æ–≥–æ "–≥–¥–µ –º–æ–∏ –¥–µ–Ω—å–≥–∏?"! üìä

3. üßò‚Äç‚ôÄÔ∏è <b>–ò–∑–±–∞–≤–∏—Ç—å—Å—è –æ—Ç —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π —Ç—Ä–µ–≤–æ–≥–∏</b>
–ù–µ –∑–Ω–∞—Ç—å, —Ö–≤–∞—Ç–∏—Ç –ª–∏ –¥–µ–Ω–µ–≥ –¥–æ –∑–∞—Ä–ø–ª–∞—Ç—ã, ‚Äî —ç—Ç–æ —Å—Ç—Ä–µ—Å—Å. –£—á–µ—Ç –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–≤–æ–∏ –¥–æ—Ö–æ–¥—ã, —Ä–∞—Å—Ö–æ–¥—ã –∏ –æ—Å—Ç–∞—Ç–æ–∫. –ó–Ω–∞—è, —á—Ç–æ —É —Ç–µ–±—è –µ—Å—Ç—å 10 000 ‚ÇΩ –Ω–∞ –¥–≤–µ –Ω–µ–¥–µ–ª–∏, —Ç—ã —á—É–≤—Å—Ç–≤—É–µ—à—å —Å–µ–±—è —É–≤–µ—Ä–µ–Ω–Ω–µ–µ. –≠—Ç–æ –∫–∞–∫ –∫–∞—Ä—Ç–∞ –≤ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–∏ ‚Äî —Ç—ã –≤—Å–µ–≥–¥–∞ –∑–Ω–∞–µ—à—å, –≥–¥–µ –Ω–∞—Ö–æ–¥–∏—à—å—Å—è. –°–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ! üòå

4. üé† <b>–ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å –¥–æ–ª–≥–æ–≤—É—é —Å–ø–∏—Ä–∞–ª—å</b>
–ö—Ä–µ–¥–∏—Ç–∫–∏ –∏ –∑–∞–π–º—ã –º–æ–≥—É—Ç –Ω–µ–∑–∞–º–µ—Ç–Ω–æ –∑–∞—Ç—è–Ω—É—Ç—å, –µ—Å–ª–∏ —Ç—Ä–∞—Ç—ã –æ–ø–µ—Ä–µ–∂–∞—é—Ç –¥–æ—Ö–æ–¥—ã. –£—á–µ—Ç –ø–æ–∫–∞–∂–µ—Ç, –µ—Å–ª–∏ —Ç—ã —Ç—Ä–∞—Ç–∏—à—å –±–æ–ª—å—à–µ, —á–µ–º –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–µ—à—å. –ù–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ 30% –¥–æ—Ö–æ–¥–∞ —É—Ö–æ–¥–∏—Ç –Ω–∞ –≤—ã–ø–ª–∞—Ç—ã –ø–æ –∫—Ä–µ–¥–∏—Ç–∞–º, —ç—Ç–æ —Å–∏–≥–Ω–∞–ª –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–∏–≤—ã—á–∫–∏. –£—á–µ—Ç –ø–æ–º–æ–≥–∞–µ—Ç –∂–∏—Ç—å –ø–æ —Å—Ä–µ–¥—Å—Ç–≤–∞–º –∏ –∏–∑–±–µ–≥–∞—Ç—å –¥–æ–ª–≥–æ–≤. üí≥

5. ü•≥ <b>–ë–∞–ª–æ–≤–∞—Ç—å —Å–µ–±—è –±–µ–∑ —á—É–≤—Å—Ç–≤–∞ –≤–∏–Ω—ã</b>
–ö–æ–≥–¥–∞ —Ñ–∏–Ω–∞–Ω—Å—ã –ø–æ–¥ –∫–æ–Ω—Ç—Ä–æ–ª–µ–º, —Ç—ã –º–æ–∂–µ—à—å –≤—ã–¥–µ–ª–∏—Ç—å –±—é–¥–∂–µ—Ç –Ω–∞ —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏—è ‚Äî –Ω–æ–≤—ã–π –≥–∞–¥–∂–µ—Ç, –ø–æ—Ö–æ–¥ –≤ –∫–∞—Ñ–µ –∏–ª–∏ —Å–ø–∞. –£—á–µ—Ç –ø–æ–∑–≤–æ–ª—è–µ—Ç –∑–∞—Ä–∞–Ω–µ–µ –æ—Ç–ª–æ–∂–∏—Ç—å 2 000 ‚ÇΩ –Ω–∞ "—Ä–∞–¥–æ—Å—Ç–∏", –∏ —Ç—ã –Ω–∞—Å–ª–∞–∂–¥–∞–µ—à—å—Å—è –∏–º–∏, –Ω–µ –ø–µ—Ä–µ–∂–∏–≤–∞—è, —á—Ç–æ –ø—Ä–æ–±–∏–ª –¥—ã—Ä—É –≤ –±—é–¥–∂–µ—Ç–µ. –ñ–∏–≤–∏ —è—Ä–∫–æ, –Ω–æ –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ! üéâ

6. ‚ú® <b>–ü—Ä–µ–≤—Ä–∞—Ç–∏—Ç—å –º–µ—á—Ç—ã –≤ —Ä–µ–∞–ª—å–Ω—ã–µ —Ü–µ–ª–∏</b>
–ú–µ—á—Ç–∞–µ—à—å –æ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–∏ –∏–ª–∏ –Ω–æ–≤–æ–º –Ω–æ—É—Ç–±—É–∫–µ? –£—á–µ—Ç –¥–µ–ª–∞–µ—Ç –º–µ—á—Ç—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏. –í–º–µ—Å—Ç–æ "—Ö–æ—á—É –Ω–∞ –ë–∞–ª–∏" —Ç—ã –≤–∏–¥–∏—à—å: "–ù—É–∂–Ω–æ 80 000 ‚ÇΩ, –æ—Ç–∫–ª–∞–¥—ã–≤–∞—é 8 000 ‚ÇΩ –≤ –º–µ—Å—è—Ü, —á–µ—Ä–µ–∑ 10 –º–µ—Å—è—Ü–µ–≤ ‚Äî —á–µ–º–æ–¥–∞–Ω –≤ —Ä—É–∫–∏!" –¶–∏—Ñ—Ä—ã –ø—Ä–µ–≤—Ä–∞—â–∞—é—Ç –∂–µ–ª–∞–Ω–∏—è –≤ –ø–ª–∞–Ω, –∫–æ—Ç–æ—Ä—ã–π –ª–µ–≥–∫–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å. üèùÔ∏è

7. üí∞ <b>–ù–∞–π—Ç–∏ —Å–∫—Ä—ã—Ç—ã–µ —Ä–µ—Å—É—Ä—Å—ã –¥–ª—è —Ü–µ–ª–µ–π</b>
–£—á–µ—Ç –ø–æ–º–æ–≥–∞–µ—Ç –æ–±–Ω–∞—Ä—É–∂–∏—Ç—å, –≥–¥–µ –º–æ–∂–Ω–æ —Å—ç–∫–æ–Ω–æ–º–∏—Ç—å. –ù–∞–ø—Ä–∏–º–µ—Ä, —Å–æ–∫—Ä–∞—Ç–∏–≤ —Ç—Ä–∞—Ç—ã –Ω–∞ —Ç–∞–∫—Å–∏ –Ω–∞ 3 000 ‚ÇΩ –≤ –º–µ—Å—è—Ü, —Ç—ã –º–æ–∂–µ—à—å –æ—Ç–ª–æ–∂–∏—Ç—å —ç—Ç–∏ –¥–µ–Ω—å–≥–∏ –Ω–∞ –Ω–æ–≤—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω –∏–ª–∏ –∫—É—Ä—Å –æ–±—É—á–µ–Ω–∏—è. –ê–Ω–∞–ª–∏–∑ —Ç—Ä–∞—Ç –ø–æ–¥—Å–∫–∞–∑—ã–≤–∞–µ—Ç, –∫–∞–∫ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±—é–¥–∂–µ—Ç –±–µ–∑ –ª–∏—à–µ–Ω–∏–π, —á—Ç–æ–±—ã –±—ã—Å—Ç—Ä–µ–µ –¥–æ—Å—Ç–∏—á—å –º–µ—á—Ç—ã. üöÄ

8. üìà <b>–ú–æ—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å–≤–æ–∏–º –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º</b>
–í–∏–¥–µ—Ç—å, –∫–∞–∫ —Ä–∞—Å—Ç—É—Ç –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –∏–ª–∏ —É–º–µ–Ω—å—à–∞–µ—Ç—Å—è –¥–æ–ª–≥, ‚Äî —ç—Ç–æ –∫–∞–∫ –ø—Ä–æ—Ö–æ–¥–∏—Ç—å —É—Ä–æ–≤–Ω–∏ –≤ –∏–≥—Ä–µ! –ö–∞–∂–¥—ã–π –º–µ—Å—è—Ü —Ç–≤–æ—è –∫–æ–ø–∏–ª–∫–∞ –Ω–∞ –º–∞—à–∏–Ω—É —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ 15 000 ‚ÇΩ, –∏–ª–∏ –¥–æ–ª–≥ –ø–æ –∫—Ä–µ–¥–∏—Ç–∫–µ —Å–æ–∫—Ä–∞—â–∞–µ—Ç—Å—è –Ω–∞ 5 000 ‚ÇΩ. –≠—Ç–æ –≤–¥–æ—Ö–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –∏ –¥–µ–ª–∞–µ—Ç —Ñ–∏–Ω–∞–Ω—Å—ã —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–º–∏. üí™

9. ‚è≥<b> –û—Ü–µ–Ω–∏—Ç—å —Ü–µ–Ω–Ω–æ—Å—Ç—å —Å–≤–æ–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏</b>
–ü–æ—Å—á–∏—Ç–∞–π, —Å–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç —Ç–≤–æ–π —á–∞—Å —Ä–∞–±–æ—Ç—ã. –ï—Å–ª–∏ —Ç—ã –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–µ—à—å 400 ‚ÇΩ –≤ —á–∞—Å, –∞ –Ω–æ–≤—ã–π —Å–≤–∏—Ç–µ—Ä —Å—Ç–æ–∏—Ç 4 000 ‚ÇΩ, —ç—Ç–æ 10 —á–∞—Å–æ–≤ —Ç—Ä—É–¥–∞. –°—Ç–æ–∏—Ç –ª–∏ –æ–Ω —Ç–æ–≥–æ? –£—á–µ—Ç –ø–æ–º–æ–≥–∞–µ—Ç –≤–∑–≤–µ—à–∏–≤–∞—Ç—å –ø–æ–∫—É–ø–∫–∏ –∏ —Ü–µ–Ω–∏—Ç—å —Å–≤–æ–µ –≤—Ä–µ–º—è, –¥–µ–ª–∞—è —Ä–µ—à–µ–Ω–∏—è –±–æ–ª–µ–µ –æ—Å–æ–∑–Ω–∞–Ω–Ω—ã–º–∏. üï∞Ô∏è

10. ‚úÖ <b>–ü—Ä–∏–Ω–∏–º–∞—Ç—å —Ä–µ—à–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ñ–∞–∫—Ç–æ–≤</b>
–ü–æ–∫—É–ø–∞—Ç—å –¥–æ—Ä–æ–≥–æ–π –≥–∞–¥–∂–µ—Ç –∏–ª–∏ –ø–æ–¥–æ–∂–¥–∞—Ç—å? –£—á–µ—Ç –¥–∞–µ—Ç –æ—Ç–≤–µ—Ç: –µ—Å–ª–∏ –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏ —É —Ç–µ–±—è –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –≤—Å–µ–≥–æ 3 000 ‚ÇΩ –Ω–∞ –º–µ—Å—è—Ü, –ª—É—á—à–µ –æ—Ç–ª–æ–∂–∏—Ç—å. –¶–∏—Ñ—Ä—ã –Ω–µ –≤—Ä—É—Ç, –∏ —Ç—ã –º–æ–∂–µ—à—å –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Ä–µ—à–µ–Ω–∏—è, –æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –∞ –Ω–µ –Ω–∞ —ç–º–æ—Ü–∏—è—Ö. –≠—Ç–æ –∫–∞–∫ –∫–æ–º–ø–∞—Å –≤ –º–∏—Ä–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤! üß≠

11. üìä <b>–£–ø—Ä–∞–≤–ª—è—Ç—å –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω—ã–º –¥–æ—Ö–æ–¥–æ–º</b>
–î–ª—è —Ñ—Ä–∏–ª–∞–Ω—Å–µ—Ä–æ–≤, —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–æ–≤ –∏–ª–∏ –º–∞—Å—Ç–µ—Ä–æ–≤ —Å –ø–ª–∞–≤–∞—é—â–∏–º –¥–æ—Ö–æ–¥–æ–º —É—á–µ—Ç ‚Äî —Å–ø–∞—Å–µ–Ω–∏–µ. –û–Ω –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ä–µ–¥–Ω–∏–π –¥–æ—Ö–æ–¥ –∑–∞ –º–µ—Å—è—Ü, –≤—ã—è–≤–ª—è–µ—Ç —Å–µ–∑–æ–Ω–Ω—ã–µ —Å–ø–∞–¥—ã –∏ –ø–æ–º–æ–≥–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å. –ù–∞–ø—Ä–∏–º–µ—Ä, –∑–Ω–∞—è, —á—Ç–æ –≤ –¥–µ–∫–∞–±—Ä–µ –∑–∞–∫–∞–∑–æ–≤ –º–µ–Ω—å—à–µ, —Ç—ã –æ—Ç–ª–æ–∂–∏—à—å –¥–µ–Ω—å–≥–∏ –∑–∞—Ä–∞–Ω–µ–µ. –ü–æ—Ä—è–¥–æ–∫ –≤–º–µ—Å—Ç–æ —Ö–∞–æ—Å–∞! üíº

üí∏ <b>–ù–∞—á–Ω–∏ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!</b> –£—á–µ—Ç ‚Äî —ç—Ç–æ –Ω–µ –ø—Ä–æ —Å–∫—É–∫—É, –∞ –ø—Ä–æ –∫–æ–Ω—Ç—Ä–æ–ª—å –∏ —Å–≤–æ–±–æ–¥—É. –í—Å–µ–≥–æ –ø–∞—Ä–∞ –º–∏–Ω—É—Ç –≤ –¥–µ–Ω—å, –∏ —Ç–≤–æ–∏ —Ñ–∏–Ω–∞–Ω—Å—ã –ø—Ä–µ–≤—Ä–∞—Ç—è—Ç—Å—è –∏–∑ –∑–∞–≥–∞–¥–∫–∏ –≤ —á–µ—Ç–∫–∏–π –ø–ª–∞–Ω. –°–¥–µ–ª–∞–π –ø–µ—Ä–≤—ã–π —à–∞–≥ –∫ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏! üöÄ`

	msg := tgbotapi.NewMessage(chatID, tips)
	msg.ParseMode = "HTML"
	b.send(chatID, msg)
	b.sendMainMenu(chatID, "üéâ –ß—Ç–æ –¥–∞–ª—å—à–µ?")
}

func (b *Bot) Start() {
	log.Printf("ü§ñ –ë–æ—Ç %s —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!", b.bot.Self.UserName)
	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60
	for upd := range b.bot.GetUpdatesChan(u) {
		if upd.Message != nil {
			b.handleMessage(upd.Message)
		} else if upd.CallbackQuery != nil {
			b.handleCallback(upd.CallbackQuery)
		}
	}
}

func (b *Bot) handleMessage(m *tgbotapi.Message) {
	logger.LogCommand(m.From.UserName, fmt.Sprintf("–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: %s", m.Text))

	user, err := b.repo.GetOrCreateUser(
		m.From.ID,
		m.From.UserName,
		m.From.FirstName,
		m.From.LastName,
	)
	if err != nil {
		logger.LogError(m.From.UserName, fmt.Sprintf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: %v", err))
		b.sendError(m.Chat.ID, err)
		return
	}

	svc := service.NewService(b.repo, user)

	switch m.Text {
	case "/start":
		logger.LogCommand(m.From.UserName, "–ö–æ–º–∞–Ω–¥–∞ /start")
		b.initBasicCategories(user)
		welcomeMsg := `üëã <b>–ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø–æ–º–æ—à–Ω–∏–∫!</b>

üìå <i>–í–æ—Ç —á—Ç–æ —è —É–º–µ—é:</i>

‚ûï <b>–î–æ–±–∞–≤–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é</b> - —É—á–µ—Ç –¥–æ—Ö–æ–¥–æ–≤ –∏ —Ä–∞—Å—Ö–æ–¥–æ–≤
üí∞ <b>–ü–æ–ø–æ–ª–Ω–∏—Ç—å –∫–æ–ø–∏–ª–∫—É</b> - –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –≤–∞—à–∏—Ö –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–π
üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b> - –ø–æ–¥—Ä–æ–±–Ω—ã–µ –æ—Ç—á–µ—Ç—ã –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
üíµ <b>–ù–∞–∫–æ–ø–ª–µ–Ω–∏—è</b> - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–±–µ—Ä–µ–≥–∞—Ç–µ–ª—å–Ω—ã–º–∏ —Ü–µ–ª—è–º–∏
‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b> - –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞`

		msg := tgbotapi.NewMessage(m.Chat.ID, welcomeMsg)
		msg.ParseMode = "HTML"
		msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("üìù 11 —Å–æ–≤–µ—Ç–æ–≤ –ø–æ —ç–∫–æ–Ω–æ–º–∏–∏", "saving_tips"),
				tgbotapi.NewInlineKeyboardButtonData("‚ûï –ù–∞—á–∞—Ç—å —É—á–µ—Ç", "start_transaction"),
			),
		)
		b.send(m.Chat.ID, msg)

	case "‚ûï –î–æ–±–∞–≤–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é":
		logger.LogCommand(m.From.UserName, "–ö–Ω–æ–ø–∫–∞: –î–æ–±–∞–≤–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é")
		b.startAddTransaction(m.Chat.ID)

	case "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
		logger.LogCommand(m.From.UserName, "–ö–Ω–æ–ø–∫–∞: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
		b.showReport(m.Chat.ID, svc)

	case "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏":
		logger.LogCommand(m.From.UserName, "–ö–Ω–æ–ø–∫–∞: –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
		b.showSettingsMenu(m.Chat.ID)

	case "üíµ –ù–∞–∫–æ–ø–ª–µ–Ω–∏—è":
		logger.LogCommand(m.From.UserName, "–ö–Ω–æ–ø–∫–∞: –ù–∞–∫–æ–ø–ª–µ–Ω–∏—è")
		b.showSavings(m.Chat.ID, svc)

	default:
		logger.LogCommand(m.From.UserName, fmt.Sprintf("–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: %s", m.Text))
		b.handleUserInput(m, svc)
	}
}

func (b *Bot) showSettingsMenu(chatID int64) {
	msg := tgbotapi.NewMessage(chatID, "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n\n–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ö–æ—á–µ—à—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å:")
	msg.ParseMode = "HTML"
	msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", "notification_settings"),
			tgbotapi.NewInlineKeyboardButtonData("üìù –ö–∞—Ç–µ–≥–æ—Ä–∏–∏", "manage_categories"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üßπ –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ", "confirm_clear_data"),
		),
	)
	b.send(chatID, msg)
}

func (b *Bot) showNotificationSettings(chatID int64) {
	user, err := b.repo.GetOrCreateUser(chatID, "", "", "")
	if err != nil {
		b.sendError(chatID, err)
		return
	}

	svc := service.NewService(b.repo, user)
	enabled, err := svc.GetNotificationsEnabled()
	if err != nil {
		b.sendError(chatID, err)
		return
	}

	status := "üîï –û—Ç–∫–ª—é—á–µ–Ω—ã"
	if enabled {
		status = "üîî –í–∫–ª—é—á–µ–Ω—ã"
	}

	msg := tgbotapi.NewMessage(chatID,
		fmt.Sprintf("üîî <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</b>\n\n–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: %s\n\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", status))
	msg.ParseMode = "HTML"
	msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üîî –í–∫–ª—é—á–∏—Ç—å", "enable_notifications"),
			tgbotapi.NewInlineKeyboardButtonData("üîï –û—Ç–∫–ª—é—á–∏—Ç—å", "disable_notifications"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚óÄÔ∏è –í –º–µ–Ω—é", "settings_back"),
		),
	)
	b.send(chatID, msg)
}

func (b *Bot) showCategoryManagement(chatID int64, svc *service.FinanceService) {
	categories, err := svc.GetCategories()
	if err != nil {
		b.sendError(chatID, err)
		return
	}

	if len(categories) == 0 {
		b.send(chatID, tgbotapi.NewMessage(chatID, "üòî –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é –≤ –º–µ–Ω—é!"))
		return
	}

	var rows [][]tgbotapi.InlineKeyboardButton
	for _, cat := range categories {
		btnText := fmt.Sprintf("%s (%s)", cat.Name, cat.Type)
		rows = append(rows, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(btnText, CallbackEditCategory+strconv.Itoa(cat.ID)),
		))
	}

	rows = append(rows, tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("‚óÄÔ∏è –í –º–µ–Ω—é", "settings_back"),
	))

	msg := tgbotapi.NewMessage(chatID, "üìù <b>–ö–∞—Ç–µ–≥–æ—Ä–∏–∏</b>\n\n–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
	msg.ParseMode = "HTML"
	msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(rows...)
	b.send(chatID, msg)
}

func (b *Bot) showCategoryActions(chatID int64, categoryID int, svc *service.FinanceService) {
	category, err := svc.GetCategoryByID(categoryID)
	if err != nil {
		b.sendError(chatID, err)
		return
	}

	msgText := fmt.Sprintf("üìù <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> %s\n<b>–¢–∏–ø:</b> %s\n\n–ß—Ç–æ —Å–¥–µ–ª–∞—Ç—å?", category.Name, category.Type)

	msg := tgbotapi.NewMessage(chatID, msgText)
	msg.ParseMode = "HTML"
	msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚úèÔ∏è –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å", CallbackRenameCategory+strconv.Itoa(categoryID)),
			tgbotapi.NewInlineKeyboardButtonData("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", CallbackDeleteCategory+strconv.Itoa(categoryID)),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚óÄÔ∏è –ù–∞–∑–∞–¥", "manage_categories"),
		),
	)
	b.send(chatID, msg)
}

func (b *Bot) handleCallback(q *tgbotapi.CallbackQuery) {
	_, _ = b.bot.Request(tgbotapi.NewCallback(q.ID, ""))
	chatID := q.From.ID
	data := q.Data

	user, err := b.repo.GetOrCreateUser(
		q.From.ID,
		q.From.UserName,
		q.From.FirstName,
		q.From.LastName,
	)
	if err != nil {
		logger.LogError(q.From.UserName, fmt.Sprintf("–û—à–∏–±–∫–∞: %v", err))
		b.sendError(chatID, err)
		return
	}

	svc := service.NewService(b.repo, user)

	logger.LogButtonClick(q.From.UserName, data)

	switch {
	case data == "cancel":
		b.sendMainMenu(chatID, "üö´ –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –ß—Ç–æ –¥–∞–ª—å—à–µ?")

	case data == "saving_tips":
		b.showSavingTips(chatID)

	case data == "start_transaction":
		b.startAddTransaction(chatID)

	case data == "manage_categories":
		b.showCategoryManagement(chatID, svc)

	case data == "settings_back":
		b.showSettingsMenu(chatID)

	case strings.HasPrefix(data, CallbackEditCategory):
		catID, _ := strconv.Atoi(data[len(CallbackEditCategory):])
		b.showCategoryActions(chatID, catID, svc)

	case data == "add_to_saving":
		b.startAddToSaving(chatID, svc)

	case data == "savings_stats":
		b.showSavingsStats(chatID, svc)

	case data == "show_savings":
		b.showSavings(chatID, svc)

	case data == "main_menu":
		b.sendMainMenu(chatID, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")

	case strings.HasPrefix(data, CallbackRenameCategory):
		catID, _ := strconv.Atoi(data[len(CallbackRenameCategory):])
		state := userStates[chatID]
		state.Step = "rename_category"
		state.TempCategoryID = catID
		userStates[chatID] = state
		b.send(chatID, tgbotapi.NewMessage(chatID, "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:"))

	case data == "skip_comment":
		editMsg := tgbotapi.NewEditMessageReplyMarkup(chatID, q.Message.MessageID, tgbotapi.InlineKeyboardMarkup{})
		b.bot.Send(editMsg)
		s := userStates[chatID]
		s.TempComment = ""
		userStates[chatID] = s
		b.handleComment(&tgbotapi.Message{
			Chat: &tgbotapi.Chat{ID: chatID},
			From: q.From,
			Text: "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å",
		}, svc)

	case data == "skip_saving_goal":
		editMsg := tgbotapi.NewEditMessageReplyMarkup(chatID, q.Message.MessageID, tgbotapi.InlineKeyboardMarkup{})
		b.bot.Send(editMsg)
		s := userStates[chatID]
		s.TempAmount = 0
		userStates[chatID] = s
		b.handleCreateSavingGoal(&tgbotapi.Message{
			Chat: &tgbotapi.Chat{ID: chatID},
			From: q.From,
			Text: "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å",
		})

	case strings.HasPrefix(data, CallbackDeleteCategory):
		catID, _ := strconv.Atoi(data[len(CallbackDeleteCategory):])
		b.handleDeleteCategory(chatID, catID, q.Message.MessageID, svc)

	case data == "type_income" || data == "type_expense":
		b.handleTypeSelect(chatID, q.Message.MessageID, data, svc)

	case strings.HasPrefix(data, "add_to_saving_"):
		parts := strings.Split(data, "_")
		if len(parts) < 4 {
			b.sendError(chatID, fmt.Errorf("–Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –∫–æ–ø–∏–ª–∫–∏"))
			return
		}

		savingID, err := strconv.Atoi(parts[3])
		if err != nil {
			b.sendError(chatID, fmt.Errorf("–æ—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è ID –∫–æ–ø–∏–ª–∫–∏"))
			return
		}

		saving, err := svc.GetSavingByID(savingID)
		if err != nil {
			b.sendError(chatID, fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–æ–ø–∏–ª–∫—É"))
			return
		}

		state := userStates[chatID]
		state.Step = "enter_saving_amount"
		state.TempCategoryID = savingID
		userStates[chatID] = state

		edit := tgbotapi.NewEditMessageReplyMarkup(chatID, q.Message.MessageID, tgbotapi.InlineKeyboardMarkup{})
		b.bot.Send(edit)

		b.send(chatID, tgbotapi.NewMessage(chatID, fmt.Sprintf("üíµ –í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–æ–ø–∏–ª–∫—É: %s\n–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:", saving.Name)))

	case strings.HasPrefix(data, "cat_"):
		catID, err := strconv.Atoi(data[4:])
		if err != nil {
			b.sendError(chatID, fmt.Errorf("–æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"))
			return
		}
		b.handleCatSelect(int(chatID), catID)

	case data == "notification_settings":
		b.showNotificationSettings(chatID)

	case data == "enable_notifications":
		b.handleToggleNotifications(chatID, true, q.From)

	case data == "disable_notifications":
		b.handleToggleNotifications(chatID, false, q.From)

	case data == "other_cat":
		state := userStates[chatID]
		state.Step = "new_cat"
		userStates[chatID] = state
		b.send(chatID, tgbotapi.NewMessage(chatID, "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:"))

	case data == "create_saving":
		state := userStates[chatID]
		state.Step = "create_saving_name"
		userStates[chatID] = state
		b.send(chatID, tgbotapi.NewMessage(chatID, "üí∏ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–ø–∏–ª–∫–∏:"))

	case data == "confirm_clear_data":
		msg := tgbotapi.NewMessage(chatID, "‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ!</b>\n\n–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –í–°–ï —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!\n\n–í—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏, –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –∫–æ–ø–∏–ª–∫–∏ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã.")
		msg.ParseMode = "HTML"
		msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å –≤—Å–µ", "clear_data"),
				tgbotapi.NewInlineKeyboardButtonData("‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å", "settings_back"),
			),
		)
		b.send(chatID, msg)

	case data == "clear_data":
		err := svc.ClearUserData()
		if err != nil {
			logger.LogError(fmt.Sprintf("user_%d", chatID), fmt.Sprintf("–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö: %v", err))
			b.sendError(chatID, err)
			return
		}

		b.initBasicCategories(user)

		b.send(chatID, tgbotapi.NewMessage(chatID, "üßπ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã! –ë–æ—Ç —Å–±—Ä–æ—à–µ–Ω –∫ –Ω–∞—á–∞–ª—å–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é."))
		b.sendMainMenu(chatID, "üîÑ –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ!")

	default:
		b.bot.Send(tgbotapi.NewCallback(q.ID, ""))
	}
}

func (b *Bot) showSavingsStats(chatID int64, svc *service.FinanceService) {
	savings, err := svc.GetSavings()
	if err != nil {
		b.sendError(chatID, err)
		return
	}

	var totalSaved, totalGoal float64
	var msgText strings.Builder
	msgText.WriteString("üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–ø–∏–ª–æ–∫*\n\n")

	for _, s := range savings {
		if s.Goal != nil {
			totalSaved += s.Amount
			totalGoal += *s.Goal
			progress := b.renderProgressBar(s.Progress(), 10)

			msgText.WriteString(fmt.Sprintf(
				"üîπ *%s*\n"+
					"‚î£ –ù–∞–∫–æ–ø–ª–µ–Ω–æ: *%.2f ‚ÇΩ*\n"+
					"‚î£ –¶–µ–ª—å: *%.2f ‚ÇΩ*\n"+
					"‚îó –ü—Ä–æ–≥—Ä–µ—Å—Å: %s\n\n",
				s.Name, s.Amount, *s.Goal, progress,
			))
		}
	}

	msg := tgbotapi.NewMessage(chatID, msgText.String())
	msg.ParseMode = "Markdown"
	msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–æ–ø–∏–ª–∫–∞–º", "show_savings"),
		),
	)
	b.send(chatID, msg)
}

func (b *Bot) handleToggleNotifications(chatID int64, enable bool, user *tgbotapi.User) {
	dbUser, err := b.repo.GetOrCreateUser(user.ID, user.UserName, user.FirstName, user.LastName)
	if err != nil {
		b.sendError(chatID, err)
		return
	}

	svc := service.NewService(b.repo, dbUser)
	err = svc.SetNotificationsEnabled(enable)
	if err != nil {
		b.sendError(chatID, err)
		return
	}

	status := "üîî –í–∫–ª—é—á–µ–Ω—ã"
	if !enable {
		status = "üîï –û—Ç–∫–ª—é—á–µ–Ω—ã"
	}

	b.send(chatID, tgbotapi.NewMessage(chatID, fmt.Sprintf("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è %s", status)))
	b.showNotificationSettings(chatID)
}

func (b *Bot) handleDeleteCategory(chatID int64, categoryID int, messageID int, svc *service.FinanceService) {
	transactions, err := svc.GetTransactionsForPeriod(time.Now().AddDate(-10, 0, 0), time.Now())
	if err != nil {
		b.sendError(chatID, err)
		return
	}

	hasTransactions := false
	for _, t := range transactions {
		if t.CategoryID == categoryID {
			hasTransactions = true
			break
		}
	}

	if hasTransactions {
		msg := tgbotapi.NewMessage(chatID, "‚ö†Ô∏è –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é, —Å–≤—è–∑–∞–Ω–Ω—É—é —Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏!")
		b.send(chatID, msg)
		return
	}

	err = svc.DeleteCategory(categoryID)
	if err != nil {
		b.sendError(chatID, err)
		return
	}

	edit := tgbotapi.NewEditMessageTextAndMarkup(
		chatID,
		messageID,
		"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è —É–¥–∞–ª–µ–Ω–∞!",
		tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("‚óÄÔ∏è –ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", "manage_categories"),
			),
		),
	)
	b.send(chatID, edit)
}

func (b *Bot) handleUserInput(m *tgbotapi.Message, svc *service.FinanceService) {
	s, ok := userStates[m.From.ID]
	if !ok {
		b.sendMainMenu(m.Chat.ID, "ü§î –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
		return
	}

	switch s.Step {
	case "rename_category":
		b.handleRenameCategory(m, svc)
	case "enter_amount":
		b.handleAmount(m)
	case "enter_comment":
		b.handleComment(m, svc)
	case "enter_saving_amount":
		b.handleSavingAmount(m, svc)
	case "new_cat":
		b.handleNewCategory(m, svc)
	case "create_saving_name":
		b.handleCreateSavingName(m)
	case "create_saving_goal":
		b.handleCreateSavingGoal(m)
	default:
		b.sendMainMenu(m.Chat.ID, "ü§î –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
	}
}

func (b *Bot) handleRenameCategory(m *tgbotapi.Message, svc *service.FinanceService) {
	state := userStates[m.From.ID]
	newName := strings.TrimSpace(m.Text)

	if newName == "" {
		b.send(m.Chat.ID, tgbotapi.NewMessage(m.Chat.ID, "‚ö†Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:"))
		return
	}

	err := svc.RenameCategory(state.TempCategoryID, newName)
	if err != nil {
		b.sendError(m.Chat.ID, err)
		return
	}

	delete(userStates, m.From.ID)
	b.send(m.Chat.ID, tgbotapi.NewMessage(m.Chat.ID, "‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∞!"))
	b.showCategoryManagement(m.Chat.ID, svc)
}

func (b *Bot) handleTypeSelect(chatID int64, msgID int, data string, svc *service.FinanceService) {
	u := UserState{Step: "select_cat", TempType: data[5:]}
	userStates[chatID] = u

	cats, _ := svc.GetCategories()
	var rows [][]tgbotapi.InlineKeyboardButton
	for _, c := range cats {
		if c.Type == u.TempType {
			rows = append(rows, tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData(c.Name, "cat_"+strconv.Itoa(c.ID)),
			))
		}
	}
	rows = append(rows, tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("‚ú® –ù–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è", "other_cat"),
	))
	rows = append(rows, tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("‚óÄÔ∏è –û—Ç–º–µ–Ω–∞", "cancel"),
	))
	edit := tgbotapi.NewEditMessageTextAndMarkup(chatID, msgID, "üìÇ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", tgbotapi.NewInlineKeyboardMarkup(rows...))
	b.send(chatID, edit)
}

func (b *Bot) handleCatSelect(chatID int, catID int) {
	s := userStates[int64(chatID)]
	s.Step = "enter_amount"
	s.TempCategoryID = catID
	userStates[int64(chatID)] = s

	msg := tgbotapi.NewMessage(int64(chatID), "üí∏ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1500):")
	msg.ReplyMarkup = tgbotapi.NewRemoveKeyboard(true)
	b.send(int64(chatID), msg)
}

func (b *Bot) handleSavingAmount(m *tgbotapi.Message, svc *service.FinanceService) {
	amount, err := strconv.ParseFloat(m.Text, 64)
	if err != nil || amount <= 0 {
		b.send(m.Chat.ID, tgbotapi.NewMessage(m.Chat.ID, "‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, 500):"))
		return
	}

	state := userStates[m.From.ID]
	savingID := state.TempCategoryID

	saving, err := svc.GetSavingByID(savingID)
	if err != nil {
		b.sendError(m.Chat.ID, fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–æ–ø–∏–ª–∫—É"))
		return
	}

	newAmount := saving.Amount + amount
	if err := svc.UpdateSavingAmount(savingID, newAmount); err != nil {
		b.sendError(m.Chat.ID, err)
		return
	}

	b.send(m.Chat.ID, tgbotapi.NewMessage(m.Chat.ID,
		fmt.Sprintf("‚úÖ –ö–æ–ø–∏–ª–∫–∞ '%s' –ø–æ–ø–æ–ª–Ω–µ–Ω–∞ –Ω–∞ %.2f ‚ÇΩ!\nüí∞ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: %.2f ‚ÇΩ", saving.Name, amount, newAmount)))

	delete(userStates, m.From.ID)
	b.showSavings(m.Chat.ID, svc)
}

func (b *Bot) handleAmount(m *tgbotapi.Message) {
	a, err := strconv.ParseFloat(m.Text, 64)
	if err != nil || a <= 0 {
		b.send(m.Chat.ID, tgbotapi.NewMessage(m.Chat.ID, "‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1500):"))
		return
	}
	s := userStates[m.From.ID]
	s.Step = "enter_comment"
	s.TempAmount = a
	userStates[m.From.ID] = s

	msg := tgbotapi.NewMessage(m.Chat.ID, "üìù –î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:")
	msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", "skip_comment"),
		),
	)
	b.send(m.Chat.ID, msg)
}

func (b *Bot) handleComment(m *tgbotapi.Message, svc *service.FinanceService) {
	s := userStates[m.From.ID]
	if m.Text != "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å" {
		s.TempComment = m.Text
	} else {
		s.TempComment = ""
	}

	editMsg := tgbotapi.NewEditMessageReplyMarkup(m.Chat.ID, m.MessageID, tgbotapi.InlineKeyboardMarkup{})
	b.bot.Send(editMsg)

	c, err := svc.GetCategoryByID(s.TempCategoryID)
	if err != nil {
		b.sendError(m.Chat.ID, err)
		return
	}
	amt := s.TempAmount
	if c.Type == "expense" {
		amt = -amt
	}
	if _, err := svc.AddTransaction(amt, s.TempCategoryID, "card", s.TempComment); err != nil {
		b.sendError(m.Chat.ID, err)
		return
	}
	label := "–î–æ—Ö–æ–¥"
	if amt < 0 {
		label = "–†–∞—Å—Ö–æ–¥"
		amt = -amt
	}
	b.send(m.Chat.ID, tgbotapi.NewMessage(m.Chat.ID,
		fmt.Sprintf("‚úÖ %s: %s, %.2f ‚ÇΩ", label, c.Name, amt)))

	delete(userStates, m.From.ID)
	b.sendMainMenu(m.Chat.ID, "üéâ –û–ø–µ—Ä–∞—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞! –ß—Ç–æ –¥–∞–ª—å—à–µ?")
}

func (b *Bot) handleNewCategory(m *tgbotapi.Message, svc *service.FinanceService) {
	s := userStates[m.From.ID]
	if _, err := svc.CreateCategory(m.Text, s.TempType, nil); err != nil {
		b.sendError(m.Chat.ID, err)
		return
	}
	b.send(m.Chat.ID, tgbotapi.NewMessage(m.Chat.ID, "‚úÖ –ù–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è —Å–æ–∑–¥–∞–Ω–∞!"))
	delete(userStates, m.From.ID)
	b.sendMainMenu(m.Chat.ID, "üéâ –ß—Ç–æ –¥–∞–ª—å—à–µ?")
}

func (b *Bot) showReport(chatID int64, svc *service.FinanceService) {
	now := time.Now()
	start := time.Date(now.Year(), now.Month(), 1, 0, 0, 0, 0, now.Location())
	end := start.AddDate(0, 1, 0)

	trans, err := svc.GetTransactionsForPeriod(start, end)
	if err != nil {
		b.sendError(chatID, fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"))
		return
	}

	var totalIncome, totalExpense float64
	incomeDetails := make(map[string]float64)
	expenseDetails := make(map[string]float64)

	for _, t := range trans {
		c, err := svc.GetCategoryByID(t.CategoryID)
		categoryName := "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
		if err == nil {
			categoryName = c.Name
		}

		if t.Amount > 0 {
			totalIncome += t.Amount
			incomeDetails[categoryName] += t.Amount
		} else {
			totalExpense += math.Abs(t.Amount)
			expenseDetails[categoryName] += math.Abs(t.Amount)
		}
	}

	format := func(amount float64) string {
		return fmt.Sprintf("%.2f ‚ÇΩ", amount)
	}

	var incomeDetailsStr strings.Builder
	for name, amount := range incomeDetails {
		incomeDetailsStr.WriteString(fmt.Sprintf("‚î£  %s: %s\n", name, format(amount)))
	}

	var expenseDetailsStr strings.Builder
	for name, amount := range expenseDetails {
		expenseDetailsStr.WriteString(fmt.Sprintf("‚î£  %s: %s\n", name, format(amount)))
	}

	balance := totalIncome - totalExpense

	msgText := fmt.Sprintf(
		"üìä <b>–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\nüìÖ –ü–µ—Ä–∏–æ–¥: <i>%s</i>\n\n"+
			"üìà <b>–î–æ—Ö–æ–¥—ã:</b> %s\n%s\n"+
			"üìâ <b>–†–∞—Å—Ö–æ–¥—ã:</b> %s\n%s\n"+
			"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"+
			"üí∏ <b>–ë–∞–ª–∞–Ω—Å:</b> <u>%s</u>",
		start.Format("January 2006"),
		format(totalIncome),
		incomeDetailsStr.String(),
		format(totalExpense),
		expenseDetailsStr.String(),
		format(balance),
	)

	msg := tgbotapi.NewMessage(chatID, msgText)
	msg.ParseMode = "HTML"
	b.send(chatID, msg)
}

func (b *Bot) renderProgressBar(percent float64, width int) string {
	displayPercent := math.Min(percent, 100)
	filled := int(math.Round(displayPercent / 100 * float64(width)))
	remaining := width - filled

	excess := ""
	if percent > 100 {
		excessCount := int(math.Round((percent - 100) / 100 * float64(width)))
		excess = strings.Repeat("üî¥", excessCount)
		remaining -= excessCount
	}

	progressBar := strings.Repeat("üü©", filled) +
		strings.Repeat("‚¨ú", remaining)

	if excess != "" {
		progressBar += " " + excess
	}

	return fmt.Sprintf("%s %.1f%%", progressBar, percent)
}

func (b *Bot) SendReminder(chatID int64) {
	msg := tgbotapi.NewMessage(chatID, `üîî <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ</b>

–ü—Ä–∏–≤–µ—Ç! –°–µ–≥–æ–¥–Ω—è —Ç—ã –Ω–µ –¥–æ–±–∞–≤–ª—è–ª(–∞) —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏. 

üí° –í–µ–¥–∏ —É—á–µ—Ç, —á—Ç–æ–±—ã –ª—É—á—à–µ —É–ø—Ä–∞–≤–ª—è—Ç—å —Ñ–∏–Ω–∞–Ω—Å–∞–º–∏! 

‚ûï –ù–∞–∂–º–∏ ¬´–î–æ–±–∞–≤–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é¬ª –∏–ª–∏ –Ω–∞–ø–∏—à–∏ —Å—É–º–º—É –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π, –Ω–∞–ø—Ä–∏–º–µ—Ä:
<code>150 —Ç–∞–∫—Å–∏</code>`)
	msg.ParseMode = "HTML"
	b.send(chatID, msg)
}

func (b *Bot) showSavings(chatID int64, svc *service.FinanceService) {
	savings, err := svc.GetSavings()
	if err != nil {
		b.sendError(chatID, err)
		return
	}

	var msgText strings.Builder
	msgText.WriteString("üíµ *–í–∞—à–∏ –∫–æ–ø–∏–ª–∫–∏*\n\n")

	if len(savings) == 0 {
		msgText.WriteString("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫–æ–ø–∏–ª–æ–∫. –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é!")
	} else {
		for _, s := range savings {
			progress := ""
			if s.Goal != nil {
				progress = b.renderProgressBar(s.Progress(), 10)
			}

			msgText.WriteString(fmt.Sprintf(
				"üîπ *%s*\n"+
					"‚î£ –ù–∞–∫–æ–ø–ª–µ–Ω–æ: *%.2f ‚ÇΩ*\n",
				s.Name, s.Amount,
			))

			if s.Goal != nil {
				msgText.WriteString(fmt.Sprintf(
					"‚î£ –¶–µ–ª—å: *%.2f ‚ÇΩ*\n"+
						"‚îó –ü—Ä–æ–≥—Ä–µ—Å—Å: %s\n\n",
					*s.Goal, progress,
				))
			} else {
				msgText.WriteString("\n")
			}
		}
	}

	msg := tgbotapi.NewMessage(chatID, msgText.String())
	msg.ParseMode = "Markdown"
	msg.ReplyMarkup = b.createSavingsKeyboard()
	b.send(chatID, msg)
}

func (b *Bot) handleCreateSavingName(m *tgbotapi.Message) {
	name := strings.TrimSpace(m.Text)
	if name == "" {
		b.send(m.Chat.ID, tgbotapi.NewMessage(m.Chat.ID, "‚ö†Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–ø–∏–ª–∫–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:"))
		return
	}

	s := userStates[m.From.ID]
	s.TempComment = name
	s.Step = "create_saving_goal"
	userStates[m.From.ID] = s

	msg := tgbotapi.NewMessage(m.Chat.ID, "üéØ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª—å –∫–æ–ø–∏–ª–∫–∏ (—á–∏—Å–ª–æ):")
	msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", "skip_saving_goal"),
		),
	)
	b.send(m.Chat.ID, msg)
}

func (b *Bot) handleCreateSavingGoal(m *tgbotapi.Message) {
	s := userStates[m.From.ID]
	var goal *float64
	if strings.ToLower(m.Text) == "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å" {
		goal = nil
	} else {
		value, err := strconv.ParseFloat(m.Text, 64)
		if err != nil || value < 0 {
			b.send(m.Chat.ID, tgbotapi.NewMessage(m.Chat.ID, "‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è —Ü–µ–ª–∏ –∏–ª–∏ ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª:"))
			return
		}
		goal = &value
	}

	user, err := b.repo.GetOrCreateUser(
		m.From.ID,
		m.From.UserName,
		m.From.FirstName,
		m.From.LastName,
	)
	if err != nil {
		b.sendError(m.Chat.ID, err)
		return
	}

	svc := service.NewService(b.repo, user)

	if err := svc.CreateSaving(s.TempComment, goal); err != nil {
		b.sendError(m.Chat.ID, err)
		return
	}

	b.send(m.Chat.ID, tgbotapi.NewMessage(m.Chat.ID, "üéâ –ö–æ–ø–∏–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞!"))

	delete(userStates, m.From.ID)

	removeKeyboardMsg := tgbotapi.NewMessage(m.Chat.ID, "")
	removeKeyboardMsg.ReplyMarkup = tgbotapi.NewRemoveKeyboard(true)
	b.bot.Send(removeKeyboardMsg)

	b.showSavings(m.Chat.ID, svc)
}

func (b *Bot) sendMainMenu(chatID int64, text string) {
	msg := tgbotapi.NewMessage(chatID, text)
	menu := tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é"),
		),
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
			tgbotapi.NewKeyboardButton("üíµ –ù–∞–∫–æ–ø–ª–µ–Ω–∏—è"),
		),
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"),
		),
	)
	msg.ReplyMarkup = menu
	msg.ParseMode = "HTML"
	b.send(chatID, msg)
}

func (b *Bot) sendError(chatID int64, err error) {
	b.send(chatID, tgbotapi.NewMessage(chatID, fmt.Sprintf("‚ö†Ô∏è –û—à–∏–±–∫–∞: %s", err.Error())))
}

func (b *Bot) send(chatID int64, c tgbotapi.Chattable) {
	_, err := b.bot.Send(c)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —á–∞—Ç %d: %v", chatID, err)
	}
}

func (b *Bot) SendMessage(msg tgbotapi.MessageConfig) {
	_, err := b.bot.Send(msg)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
	}
}
