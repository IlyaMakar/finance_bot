package handlers

import (
	"fmt"
	"log"
	"strconv"
	"strings"
	"time"

	"github.com/IlyaMakar/finance_bot/internal/logger"
	"github.com/IlyaMakar/finance_bot/internal/service"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

func (b *Bot) handleCallback(q *tgbotapi.CallbackQuery) {
	_, _ = b.bot.Request(tgbotapi.NewCallback(q.ID, ""))
	chatID := q.From.ID
	data := q.Data

	user, err := b.repo.GetOrCreateUser(
		q.From.ID,
		q.From.UserName,
		q.From.FirstName,
		q.From.LastName,
	)
	if err != nil {
		logger.LogError(q.From.UserName, fmt.Sprintf("–û—à–∏–±–∫–∞: %v", err))
		b.sendError(chatID, err)
		return
	}
	if err := b.repo.UpdateUserActivity(user.ID, time.Now()); err != nil {
		logger.LogError(q.From.UserName, fmt.Sprintf("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: %v", err))
	}

	if err := b.repo.RecordButtonClick(int(chatID), data); err != nil {
		logger.LogError(q.From.UserName, fmt.Sprintf("–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –∫–ª–∏–∫–∞: %v", err))
	}

	svc := service.NewService(b.repo, user)

	logger.LogButtonClick(q.From.UserName, data)
	if data == CallbackManageSavings {
		b.showSavingsManagement(q.From.ID, svc)
		return
	}

	if strings.HasPrefix(data, CallbackEditSaving) {
		savingID, _ := strconv.Atoi(data[len(CallbackEditSaving):])
		b.showSavingActions(q.From.ID, savingID, q.Message.MessageID, svc)
		return
	}

	if strings.HasPrefix(data, CallbackDeleteSaving) {
		savingID, _ := strconv.Atoi(data[len(CallbackDeleteSaving):])
		b.handleDeleteSaving(q.From.ID, savingID, q.Message.MessageID, svc)
		return
	}

	if strings.HasPrefix(data, CallbackRenameSaving) {
		savingID, _ := strconv.Atoi(data[len(CallbackRenameSaving):])
		state := userStates[q.From.ID]
		state.Step = "rename_saving"
		state.TempCategoryID = savingID
		userStates[q.From.ID] = state
		b.send(q.From.ID, tgbotapi.NewMessage(q.From.ID, "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–ø–∏–ª–∫–∏:"))
		return
	}

	if strings.HasPrefix(data, CallbackClearSaving) {
		savingID, _ := strconv.Atoi(data[len(CallbackClearSaving):])
		b.handleClearSaving(q.From.ID, savingID, q.Message.MessageID, svc)
		return
	}
	if strings.HasPrefix(data, CallbackEditCategory) {
		catID, _ := strconv.Atoi(data[len(CallbackEditCategory):])
		b.showCategoryActions(chatID, catID, svc)
		return
	}

	if strings.HasPrefix(data, CallbackRenameCategory) {
		catID, _ := strconv.Atoi(data[len(CallbackRenameCategory):])
		state := userStates[chatID]
		state.Step = "rename_category"
		state.TempCategoryID = catID
		userStates[chatID] = state
		b.send(chatID, tgbotapi.NewMessage(chatID, "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:"))
		return
	}

	if strings.HasPrefix(data, CallbackDeleteCategory) {
		catID, _ := strconv.Atoi(data[len(CallbackDeleteCategory):])
		b.handleDeleteCategory(chatID, catID, q.Message.MessageID, svc)
		return
	}

	if strings.HasPrefix(data, "add_to_saving_") {
		parts := strings.Split(data, "_")
		if len(parts) < 4 {
			b.sendError(chatID, fmt.Errorf("–Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –∫–æ–ø–∏–ª–∫–∏"))
			return
		}

		savingID, err := strconv.Atoi(parts[3])
		if err != nil {
			b.sendError(chatID, fmt.Errorf("–æ—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è ID –∫–æ–ø–∏–ª–∫–∏"))
			return
		}

		saving, err := svc.GetSavingByID(savingID)
		if err != nil {
			b.sendError(chatID, fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–æ–ø–∏–ª–∫—É"))
			return
		}

		state := userStates[chatID]
		state.Step = "enter_saving_amount"
		state.TempCategoryID = savingID
		userStates[chatID] = state

		edit := tgbotapi.NewEditMessageReplyMarkup(chatID, q.Message.MessageID, tgbotapi.InlineKeyboardMarkup{})
		b.bot.Send(edit)

		b.send(chatID, tgbotapi.NewMessage(chatID, fmt.Sprintf("üíµ –í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–æ–ø–∏–ª–∫—É: %s\n–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:", saving.Name)))
		return
	}

	if strings.HasPrefix(data, "cat_") {
		catID, err := strconv.Atoi(data[4:])
		if err != nil {
			b.sendError(chatID, fmt.Errorf("–æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"))
			return
		}
		b.handleCatSelect(int(chatID), catID)
		return
	}

	if strings.HasPrefix(data, "edit_") {
		transID, err := strconv.Atoi(data[5:])
		if err != nil {
			b.sendError(chatID, fmt.Errorf("–Ω–µ–≤–µ—Ä–Ω—ã–π ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"))
			return
		}
		b.handleEditTransaction(chatID, transID, svc)
		return
	}

	switch data {
	case "cancel":
		b.sendMainMenu(chatID, "üö´ –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –ß—Ç–æ –¥–∞–ª—å—à–µ?")

	case "saving_tips":
		b.showSavingTips(chatID)

	case "start_transaction":
		b.startAddTransaction(chatID)

	case "manage_categories":
		b.showCategoryManagement(chatID, svc)

	case "settings_back":
		b.showSettingsMenu(chatID)

	case "add_to_saving":
		b.startAddToSaving(chatID, svc)

	case "savings_stats":
		b.showSavingsStats(chatID, svc)

	case "show_savings":
		b.showSavings(chatID, svc)

	case "main_menu":
		b.sendMainMenu(chatID, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
	case "support":
		b.showSupportInfo(chatID)

	case "skip_comment":
		editMsg := tgbotapi.NewEditMessageReplyMarkup(chatID, q.Message.MessageID, tgbotapi.InlineKeyboardMarkup{})
		b.bot.Send(editMsg)
		s := userStates[chatID]
		s.TempComment = ""
		userStates[chatID] = s
		b.handleComment(&tgbotapi.Message{
			Chat: &tgbotapi.Chat{ID: chatID},
			From: q.From,
			Text: "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å",
		}, svc)

	case "skip_saving_goal":
		editMsg := tgbotapi.NewEditMessageReplyMarkup(chatID, q.Message.MessageID, tgbotapi.InlineKeyboardMarkup{})
		b.bot.Send(editMsg)
		s := userStates[chatID]
		s.TempAmount = 0
		userStates[chatID] = s
		b.handleCreateSavingGoal(&tgbotapi.Message{
			Chat: &tgbotapi.Chat{ID: chatID},
			From: q.From,
			Text: "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å",
		})

	case "type_income", "type_expense":
		b.handleTypeSelect(chatID, q.Message.MessageID, data, svc)

	case "notification_settings":
		b.showNotificationSettings(chatID)

	case "enable_notifications":
		b.handleToggleNotifications(chatID, true, q.From)

	case "disable_notifications":
		b.handleToggleNotifications(chatID, false, q.From)

	case "other_cat":
		state := userStates[chatID]
		state.Step = "new_cat"
		userStates[chatID] = state
		b.send(chatID, tgbotapi.NewMessage(chatID, "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:"))

	case "create_saving":
		state := userStates[chatID]
		state.Step = "create_saving_name"
		userStates[chatID] = state
		b.send(chatID, tgbotapi.NewMessage(chatID, "üí∏ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–ø–∏–ª–∫–∏:"))

	case "confirm_clear_data":
		msg := tgbotapi.NewMessage(chatID, "‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ!</b>\n\n–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –í–°–ï —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!\n\n–í—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏, –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –∫–æ–ø–∏–ª–∫–∏ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã.")
		msg.ParseMode = "HTML"
		msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å –≤—Å–µ", "clear_data"),
				tgbotapi.NewInlineKeyboardButtonData("‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å", "settings_back"),
			),
		)
		b.send(chatID, msg)

	case "clear_data":
		err := svc.ClearUserData()
		if err != nil {
			logger.LogError(fmt.Sprintf("user_%d", chatID), fmt.Sprintf("–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö: %v", err))
			b.sendError(chatID, err)
			return
		}

		b.initBasicCategories(user)

		b.send(chatID, tgbotapi.NewMessage(chatID, "üßπ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã! –ë–æ—Ç —Å–±—Ä–æ—à–µ–Ω –∫ –Ω–∞—á–∞–ª—å–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é."))
		b.sendMainMenu(chatID, "üîÑ –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ!")

	case "stats_day":
		b.showDailyReport(chatID, svc)
	case "stats_week":
		b.showWeeklyReport(chatID, svc)
	case "stats_month":
		b.showMonthlyReport(chatID, svc)
	case "stats_year":
		b.showYearlyReport(chatID, svc)
	case "stats_back":
		b.showReportPeriodMenu(chatID)

	case "show_history":
		b.showTransactionHistory(chatID, svc)

	case "edit_amount":
		state := userStates[chatID]
		state.Step = "edit_transaction_amount"
		userStates[chatID] = state
		b.send(chatID, tgbotapi.NewMessage(chatID, "üí∞ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—É–º–º—É:"))

	case "edit_category":
		state := userStates[chatID]
		msg := tgbotapi.NewMessage(chatID, "üìÇ –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é:")
		msg.ReplyMarkup = b.createCategoryKeyboard(chatID, state.TempType, "change_category")
		b.send(chatID, msg)

	case "edit_comment":
		state := userStates[chatID]
		state.Step = "edit_transaction_comment"
		userStates[chatID] = state
		b.send(chatID, tgbotapi.NewMessage(chatID, "üí¨ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:"))

	case "delete_transaction":
		err := svc.DeleteTransaction(userStates[chatID].TempCategoryID)
		if err != nil {
			b.sendError(chatID, err)
			return
		}
		delete(userStates, chatID)
		b.send(chatID, tgbotapi.NewMessage(chatID, "‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞!"))
		b.showTransactionHistory(chatID, svc)

	default:
		b.bot.Send(tgbotapi.NewCallback(q.ID, ""))
	}
}

func (b *Bot) handleTypeSelect(chatID int64, msgID int, data string, svc *service.FinanceService) {
	u := UserState{Step: "select_cat", TempType: data[5:]}
	userStates[chatID] = u

	cats, _ := svc.GetCategories()
	var rows [][]tgbotapi.InlineKeyboardButton
	for _, c := range cats {
		if c.Type == u.TempType {
			rows = append(rows, tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData(c.Name, "cat_"+strconv.Itoa(c.ID)),
			))
		}
	}
	rows = append(rows, tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("‚ú® –ù–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è", "other_cat"),
	))
	rows = append(rows, tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("‚óÄÔ∏è –û—Ç–º–µ–Ω–∞", "cancel"),
	))
	edit := tgbotapi.NewEditMessageTextAndMarkup(chatID, msgID, "üìÇ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", tgbotapi.NewInlineKeyboardMarkup(rows...))
	b.send(chatID, edit)
}

func (b *Bot) handleCatSelect(chatID int, catID int) {
	state, ok := userStates[int64(chatID)]
	if !ok {
		b.sendError(int64(chatID), fmt.Errorf("—Å–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"))
		return
	}

	user, err := b.repo.GetOrCreateUser(int64(chatID), "", "", "")
	if err != nil {
		b.sendError(int64(chatID), err)
		return
	}

	svc := service.NewService(b.repo, user)

	category, err := svc.GetCategoryByID(catID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: userID=%d, catID=%d, err=%v", user.ID, catID, err)
		b.sendError(int64(chatID), fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é"))
		return
	}

	state.TempCategoryID = catID
	state.TempType = category.Type
	state.Step = "enter_amount"
	userStates[int64(chatID)] = state

	msg := tgbotapi.NewMessage(int64(chatID), "üí∏ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1500):")
	msg.ReplyMarkup = tgbotapi.NewRemoveKeyboard(true)
	b.send(int64(chatID), msg)
}

func (b *Bot) handleToggleNotifications(chatID int64, enable bool, user *tgbotapi.User) {
	dbUser, err := b.repo.GetOrCreateUser(user.ID, user.UserName, user.FirstName, user.LastName)
	if err != nil {
		b.sendError(chatID, err)
		return
	}

	svc := service.NewService(b.repo, dbUser)
	err = svc.SetNotificationsEnabled(enable)
	if err != nil {
		b.sendError(chatID, err)
		return
	}

	status := "üîî –í–∫–ª—é—á–µ–Ω—ã"
	if !enable {
		status = "üîï –û—Ç–∫–ª—é—á–µ–Ω—ã"
	}

	b.send(chatID, tgbotapi.NewMessage(chatID, fmt.Sprintf("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è %s", status)))
	b.showNotificationSettings(chatID)
}

func (b *Bot) handleDeleteCategory(chatID int64, categoryID int, messageID int, svc *service.FinanceService) {
	transactions, err := svc.GetTransactionsForPeriod(time.Now().AddDate(-10, 0, 0), time.Now())
	if err != nil {
		b.sendError(chatID, err)
		return
	}

	hasTransactions := false
	for _, t := range transactions {
		if t.CategoryID == categoryID {
			hasTransactions = true
			break
		}
	}

	if hasTransactions {
		msg := tgbotapi.NewMessage(chatID, "‚ö†Ô∏è –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é, —Å–≤—è–∑–∞–Ω–Ω—É—é —Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏!")
		b.send(chatID, msg)
		return
	}

	err = svc.DeleteCategory(categoryID)
	if err != nil {
		b.sendError(chatID, err)
		return
	}

	edit := tgbotapi.NewEditMessageTextAndMarkup(
		chatID,
		messageID,
		"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è —É–¥–∞–ª–µ–Ω–∞!",
		tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("‚óÄÔ∏è –ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", "manage_categories"),
			),
		),
	)
	b.send(chatID, edit)
}
