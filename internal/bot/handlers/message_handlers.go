package handlers

import (
	"fmt"
	"math"
	"strconv"
	"strings"

	"github.com/IlyaMakar/finance_bot/internal/logger"
	"github.com/IlyaMakar/finance_bot/internal/service"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

func (b *Bot) handleMessage(m *tgbotapi.Message) {
	logger.LogCommand(m.From.UserName, fmt.Sprintf("–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: %s", m.Text))

	user, err := b.repo.GetOrCreateUser(
		m.From.ID,
		m.From.UserName,
		m.From.FirstName,
		m.From.LastName,
	)
	if err != nil {
		logger.LogError(m.From.UserName, fmt.Sprintf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: %v", err))
		b.sendError(m.Chat.ID, err)
		return
	}

	svc := service.NewService(b.repo, user)

	switch m.Text {
	case "/start":
		logger.LogCommand(m.From.UserName, "–ö–æ–º–∞–Ω–¥–∞ /start")
		b.initBasicCategories(user)

		welcomeMsg := `üëã <b>–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø–æ–º–æ—â–Ω–∏–∫! üéØ</b>

üí∞ <i>–°–æ –º–Ω–æ–π —Ç—ã —Å–º–æ–∂–µ—à—å:</i>
‚Ä¢ üìä –°–ª–µ–¥–∏—Ç—å –∑–∞ –¥–æ—Ö–æ–¥–∞–º–∏ –∏ —Ä–∞—Å—Ö–æ–¥–∞–º–∏
‚Ä¢ üíµ –ö–æ–ø–∏—Ç—å –Ω–∞ –º–µ—á—Ç—ã –∏ —Ü–µ–ª–∏  
‚Ä¢ üìà –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–∏ —Ñ–∏–Ω–∞–Ω—Å—ã
‚Ä¢ üîî –ü–æ–ª—É—á–∞—Ç—å –ø–æ–ª–µ–∑–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è

üéâ <b>–î–∞–≤–∞–π –Ω–∞–≤–µ–¥–µ–º –ø–æ—Ä—è–¥–æ–∫ –≤ —Ñ–∏–Ω–∞–Ω—Å–∞—Ö –≤–º–µ—Å—Ç–µ!</b>`

		msg := tgbotapi.NewMessage(m.Chat.ID, welcomeMsg)
		msg.ParseMode = "HTML"
		msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("üí° –°–æ–≤–µ—Ç—ã –ø–æ —ç–∫–æ–Ω–æ–º–∏–∏", "saving_tips"),
				tgbotapi.NewInlineKeyboardButtonData("üöÄ –ù–∞—á–∞—Ç—å —É—á–µ—Ç", "start_transaction"),
			),
		)
		b.send(m.Chat.ID, msg)

	case "‚ûï –î–æ–±–∞–≤–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é":
		logger.LogCommand(m.From.UserName, "–ö–Ω–æ–ø–∫–∞: –î–æ–±–∞–≤–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é")
		b.startAddTransaction(m.Chat.ID)

	case "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
		logger.LogCommand(m.From.UserName, "–ö–Ω–æ–ø–∫–∞: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
		b.showReportPeriodMenu(m.Chat.ID)

	case "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏":
		logger.LogCommand(m.From.UserName, "–ö–Ω–æ–ø–∫–∞: –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
		b.showSettingsMenu(m.Chat.ID)

	case "üíµ –ù–∞–∫–æ–ø–ª–µ–Ω–∏—è":
		logger.LogCommand(m.From.UserName, "–ö–Ω–æ–ø–∫–∞: –ù–∞–∫–æ–ø–ª–µ–Ω–∏—è")
		b.showSavings(m.Chat.ID, svc)

	default:
		logger.LogCommand(m.From.UserName, fmt.Sprintf("–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: %s", m.Text))
		b.handleUserInput(m, svc)
	}
}

func (b *Bot) handleUserInput(m *tgbotapi.Message, svc *service.FinanceService) {
	s, ok := userStates[m.From.ID]
	if !ok {
		b.sendMainMenu(m.Chat.ID, "ü§î –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
		return
	}

	switch s.Step {
	case "rename_category":
		b.handleRenameCategory(m, svc)
	case "enter_amount":
		b.handleAmount(m)
	case "enter_comment":
		b.handleComment(m, svc)
	case "enter_saving_amount":
		b.handleSavingAmount(m, svc)
	case "new_cat":
		b.handleNewCategory(m, svc)
	case "create_saving_name":
		b.handleCreateSavingName(m)
	case "create_saving_goal":
		b.handleCreateSavingGoal(m)
	case "rename_saving":
		state := userStates[m.From.ID]
		newName := strings.TrimSpace(m.Text)

		if newName == "" {
			b.send(m.Chat.ID, tgbotapi.NewMessage(m.Chat.ID, "‚ö†Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:"))
			return
		}

		err := svc.RenameSaving(state.TempCategoryID, newName)
		if err != nil {
			b.sendError(m.Chat.ID, err)
			return
		}

		delete(userStates, m.From.ID)
		b.send(m.Chat.ID, tgbotapi.NewMessage(m.Chat.ID, "‚úÖ –ö–æ–ø–∏–ª–∫–∞ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∞!"))
		b.showSavingsManagement(m.Chat.ID, svc)
	case "edit_transaction_amount":
		amount, err := strconv.ParseFloat(m.Text, 64)
		if err != nil || amount <= 0 {
			b.send(m.Chat.ID, tgbotapi.NewMessage(m.Chat.ID, "‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1500):"))
			return
		}

		state := userStates[m.From.ID]
		state.TempAmount = amount
		userStates[m.From.ID] = state

		err = svc.UpdateTransactionAmount(state.TempCategoryID, amount)
		if err != nil {
			b.sendError(m.Chat.ID, err)
			return
		}

		b.send(m.Chat.ID, tgbotapi.NewMessage(m.Chat.ID, "‚úÖ –°—É–º–º–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!"))
		b.handleEditTransaction(m.Chat.ID, state.TempCategoryID, svc)

	case "edit_transaction_comment":
		state := userStates[m.From.ID]
		state.TempComment = m.Text
		userStates[m.From.ID] = state

		err := svc.UpdateTransactionComment(state.TempCategoryID, m.Text)
		if err != nil {
			b.sendError(m.Chat.ID, err)
			return
		}

		b.send(m.Chat.ID, tgbotapi.NewMessage(m.Chat.ID, "‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω!"))
		b.handleEditTransaction(m.Chat.ID, state.TempCategoryID, svc)

	case "enter_period_start_day":
		user, err := b.repo.GetOrCreateUser(m.Chat.ID, m.From.UserName, m.From.FirstName, m.From.LastName)
		if err != nil {
			b.sendError(m.Chat.ID, err)
			return
		}
		day, err := strconv.ParseInt(m.Text, 10, 32)
		if err != nil || day < 1 || day > 31 {
			b.send(m.Chat.ID, tgbotapi.NewMessage(m.Chat.ID, "‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 31:"))
			return
		}
		svc := service.NewService(b.repo, user)
		err = svc.SetPeriodStartDay(int(day))
		if err != nil {
			b.sendError(m.Chat.ID, err)
			return
		}
		b.send(m.Chat.ID, tgbotapi.NewMessage(m.Chat.ID, fmt.Sprintf("‚úÖ –ù–∞—á–∞–ª–æ –ø–µ—Ä–∏–æ–¥–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ %d-–µ —á–∏—Å–ª–æ.", day)))
		delete(userStates, m.From.ID)
		b.showSettingsMenu(m.Chat.ID)

	case "enter_saving_withdraw_amount":
		amount, err := strconv.ParseFloat(m.Text, 64)
		if err != nil || amount <= 0 {
			b.send(m.Chat.ID, tgbotapi.NewMessage(m.Chat.ID, "‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, 500):"))
			return
		}

		state := userStates[m.From.ID]
		savingID := state.TempCategoryID

		saving, err := svc.GetSavingByID(savingID)
		if err != nil {
			b.sendError(m.Chat.ID, fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–æ–ø–∏–ª–∫—É"))
			return
		}

		if saving.Amount < amount {
			b.send(m.Chat.ID, tgbotapi.NewMessage(m.Chat.ID, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –≤ –∫–æ–ø–∏–ª–∫–µ!"))
			return
		}

		newAmount := saving.Amount - amount
		if err := svc.UpdateSavingAmount(savingID, newAmount); err != nil {
			b.sendError(m.Chat.ID, err)
			return
		}

		formattedAmount := b.formatCurrency(amount, m.Chat.ID)
		formattedNewAmount := b.formatCurrency(newAmount, m.Chat.ID)

		b.send(m.Chat.ID, tgbotapi.NewMessage(m.Chat.ID,
			fmt.Sprintf("‚úÖ –°–Ω—è—Ç–æ %s –∏–∑ –∫–æ–ø–∏–ª–∫–∏ '%s'!\nüí∞ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: %s",
				formattedAmount, saving.Name, formattedNewAmount)))

		delete(userStates, m.From.ID)
		b.showSavingActions(m.Chat.ID, savingID, svc)
	default:
		b.sendMainMenu(m.Chat.ID, "ü§î –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
	}
}

func (b *Bot) handleEditTransaction(chatID int64, transactionID int, svc *service.FinanceService) {
	trans, err := svc.GetTransactionByID(transactionID)
	if err != nil {
		b.sendError(chatID, err)
		return
	}

	state := UserState{
		Step:           "edit_transaction",
		TempCategoryID: trans.ID,
		TempAmount:     math.Abs(trans.Amount),
		TempComment:    trans.Comment,
	}
	if trans.Amount < 0 {
		state.TempType = "expense"
	} else {
		state.TempType = "income"
	}
	userStates[chatID] = state

	category, err := svc.GetCategoryByID(trans.CategoryID)
	categoryName := "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
	if err == nil {
		categoryName = category.Name
	}

	formattedAmount := b.formatCurrency(math.Abs(trans.Amount), chatID)

	msgText := fmt.Sprintf(
		"‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏</b>\n\n"+
			"üìÖ –î–∞—Ç–∞: %s\n"+
			"üí∞ –°—É–º–º–∞: %s\n"+
			"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: %s\n"+
			"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: %s\n\n"+
			"–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å:",
		trans.Date.Format("02.01.2006"),
		formattedAmount,
		categoryName,
		trans.Comment,
	)

	msg := tgbotapi.NewMessage(chatID, msgText)
	msg.ParseMode = tgbotapi.ModeHTML
	msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚úèÔ∏è –°—É–º–º–∞", "edit_amount"),
			tgbotapi.NewInlineKeyboardButtonData("üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è", "edit_category"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", "edit_comment"),
			tgbotapi.NewInlineKeyboardButtonData("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", "delete_transaction"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üîô –ù–∞–∑–∞–¥", "show_history"),
		),
	)
	b.send(chatID, msg)
}
func (b *Bot) handleRenameSaving(m *tgbotapi.Message, svc *service.FinanceService) {
	state := userStates[m.From.ID]
	newName := strings.TrimSpace(m.Text)

	if newName == "" {
		b.send(m.Chat.ID, tgbotapi.NewMessage(m.Chat.ID, "‚ö†Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:"))
		return
	}

	err := svc.RenameSaving(state.TempCategoryID, newName)
	if err != nil {
		b.sendError(m.Chat.ID, err)
		return
	}

	delete(userStates, m.From.ID)
	b.send(m.Chat.ID, tgbotapi.NewMessage(m.Chat.ID, "‚úÖ –ö–æ–ø–∏–ª–∫–∞ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∞!"))
	b.showSavingsManagement(m.Chat.ID, svc)
}

func (b *Bot) handleRenameCategory(m *tgbotapi.Message, svc *service.FinanceService) {
	state := userStates[m.From.ID]
	newName := strings.TrimSpace(m.Text)

	if newName == "" {
		b.send(m.Chat.ID, tgbotapi.NewMessage(m.Chat.ID, "‚ö†Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:"))
		return
	}

	err := svc.RenameCategory(state.TempCategoryID, newName)
	if err != nil {
		b.sendError(m.Chat.ID, err)
		return
	}

	delete(userStates, m.From.ID)
	b.send(m.Chat.ID, tgbotapi.NewMessage(m.Chat.ID, "‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∞!"))
	b.showCategoryManagement(m.Chat.ID, svc)
}

func (b *Bot) handleAmount(m *tgbotapi.Message) {
	a, err := strconv.ParseFloat(m.Text, 64)
	if err != nil || a <= 0 {
		b.send(m.Chat.ID, tgbotapi.NewMessage(m.Chat.ID, "‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1500):"))
		return
	}
	s := userStates[m.From.ID]
	s.Step = "enter_comment"
	s.TempAmount = a
	userStates[m.From.ID] = s

	msg := tgbotapi.NewMessage(m.Chat.ID, "üìù –î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:")
	msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", "skip_comment"),
		),
	)
	b.send(m.Chat.ID, msg)
}

func (b *Bot) handleComment(m *tgbotapi.Message, svc *service.FinanceService) {
	state, ok := userStates[m.From.ID]
	if !ok || state.TempCategoryID == 0 {
		b.sendError(m.Chat.ID, fmt.Errorf("–Ω–µ –≤—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è"))
		return
	}

	if m.Text != "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å" {
		state.TempComment = m.Text
	} else {
		state.TempComment = ""
	}

	editMsg := tgbotapi.NewEditMessageReplyMarkup(m.Chat.ID, m.MessageID, tgbotapi.InlineKeyboardMarkup{})
	b.bot.Send(editMsg)

	amount := state.TempAmount
	if state.TempType == "expense" {
		amount = -amount
	}

	_, err := svc.AddTransaction(amount, state.TempCategoryID, "card", state.TempComment)
	if err != nil {
		b.sendError(m.Chat.ID, err)
		return
	}

	category, err := svc.GetCategoryByID(state.TempCategoryID)
	categoryName := "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
	if err == nil && category != nil {
		categoryName = category.Name
	}

	operationType := "–î–æ—Ö–æ–¥"
	if amount < 0 {
		operationType = "–†–∞—Å—Ö–æ–¥"
		amount = -amount
	}

	formattedAmount := b.formatCurrency(amount, m.Chat.ID)

	// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
	logger.LogTransaction(m.From.ID, amount, categoryName)

	b.send(m.Chat.ID, tgbotapi.NewMessage(m.Chat.ID,
		fmt.Sprintf("‚úÖ %s: %s, %s", operationType, categoryName, formattedAmount)))

	delete(userStates, m.From.ID)
	b.sendMainMenu(m.Chat.ID, "üéâ –û–ø–µ—Ä–∞—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞! –ß—Ç–æ –¥–∞–ª—å—à–µ?")
}

func (b *Bot) handleSavingAmount(m *tgbotapi.Message, svc *service.FinanceService) {
	amount, err := strconv.ParseFloat(m.Text, 64)
	if err != nil || amount <= 0 {
		b.send(m.Chat.ID, tgbotapi.NewMessage(m.Chat.ID, "‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, 500):"))
		return
	}

	state := userStates[m.From.ID]
	savingID := state.TempCategoryID

	saving, err := svc.GetSavingByID(savingID)
	if err != nil {
		b.sendError(m.Chat.ID, fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–æ–ø–∏–ª–∫—É"))
		return
	}

	newAmount := saving.Amount + amount
	if err := svc.UpdateSavingAmount(savingID, newAmount); err != nil {
		b.sendError(m.Chat.ID, err)
		return
	}

	formattedAmount := b.formatCurrency(amount, m.Chat.ID)
	formattedNewAmount := b.formatCurrency(newAmount, m.Chat.ID)

	// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –∫–æ–ø–∏–ª–∫–æ–π
	logger.LogSaving(m.From.ID, "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ", amount, saving.Name)

	b.send(m.Chat.ID, tgbotapi.NewMessage(m.Chat.ID,
		fmt.Sprintf("‚úÖ –ö–æ–ø–∏–ª–∫–∞ '%s' –ø–æ–ø–æ–ª–Ω–µ–Ω–∞ –Ω–∞ %s!\nüí∞ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: %s", saving.Name, formattedAmount, formattedNewAmount)))

	delete(userStates, m.From.ID)
	b.showSavings(m.Chat.ID, svc)
}

func (b *Bot) handleNewCategory(m *tgbotapi.Message, svc *service.FinanceService) {
	s := userStates[m.From.ID]
	if _, err := svc.CreateCategory(m.Text, s.TempType, nil); err != nil {
		b.sendError(m.Chat.ID, err)
		return
	}
	b.send(m.Chat.ID, tgbotapi.NewMessage(m.Chat.ID, "‚úÖ –ù–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è —Å–æ–∑–¥–∞–Ω–∞!"))
	delete(userStates, m.From.ID)
	b.sendMainMenu(m.Chat.ID, "üéâ –ß—Ç–æ –¥–∞–ª—å—à–µ?")
}

func (b *Bot) handleCreateSavingName(m *tgbotapi.Message) {
	name := strings.TrimSpace(m.Text)
	if name == "" {
		b.send(m.Chat.ID, tgbotapi.NewMessage(m.Chat.ID, "‚ö†Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–ø–∏–ª–∫–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:"))
		return
	}

	s := userStates[m.From.ID]
	s.TempComment = name
	s.Step = "create_saving_goal"
	userStates[m.From.ID] = s

	msg := tgbotapi.NewMessage(m.Chat.ID, "üéØ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª—å –∫–æ–ø–∏–ª–∫–∏ (—á–∏—Å–ª–æ):")
	msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", "skip_saving_goal"),
		),
	)
	b.send(m.Chat.ID, msg)
}

func (b *Bot) handleCreateSavingGoal(m *tgbotapi.Message) {
	s := userStates[m.From.ID]
	var goal *float64
	if strings.ToLower(m.Text) == "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å" {
		goal = nil
	} else {
		value, err := strconv.ParseFloat(m.Text, 64)
		if err != nil || value < 0 {
			b.send(m.Chat.ID, tgbotapi.NewMessage(m.Chat.ID, "‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è —Ü–µ–ª–∏ –∏–ª–∏ ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª:"))
			return
		}
		goal = &value
	}

	user, err := b.repo.GetOrCreateUser(
		m.From.ID,
		m.From.UserName,
		m.From.FirstName,
		m.From.LastName,
	)
	if err != nil {
		b.sendError(m.Chat.ID, err)
		return
	}

	svc := service.NewService(b.repo, user)

	if err := svc.CreateSaving(s.TempComment, goal); err != nil {
		b.sendError(m.Chat.ID, err)
		return
	}

	// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–ø–∏–ª–∫–∏
	logger.LogSaving(m.From.ID, "–°–æ–∑–¥–∞–Ω–∏–µ", 0, s.TempComment)

	b.send(m.Chat.ID, tgbotapi.NewMessage(m.Chat.ID, "üéâ –ö–æ–ø–∏–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞!"))

	delete(userStates, m.From.ID)

	removeKeyboardMsg := tgbotapi.NewMessage(m.Chat.ID, "")
	removeKeyboardMsg.ReplyMarkup = tgbotapi.NewRemoveKeyboard(true)
	b.bot.Send(removeKeyboardMsg)

	b.showSavings(m.Chat.ID, svc)
}
