package handlers

import (
	"fmt"
	"log"
	"math"
	"sort"
	"strconv"
	"strings"
	"time"

	"github.com/IlyaMakar/finance_bot/internal/logger"
	"github.com/IlyaMakar/finance_bot/internal/repository"
	"github.com/IlyaMakar/finance_bot/internal/service"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

func (b *Bot) startAddTransaction(chatID int64) {
	msg := tgbotapi.NewMessage(chatID, "üí∏ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
	msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üìà –î–æ—Ö–æ–¥", "type_income"),
			tgbotapi.NewInlineKeyboardButtonData("üìâ –†–∞—Å—Ö–æ–¥", "type_expense"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üìú –ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π", "show_history"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚óÄÔ∏è –û—Ç–º–µ–Ω–∞", "cancel"),
		),
	)
	b.send(chatID, msg)
}

func (b *Bot) startAddToSaving(chatID int64, svc *service.FinanceService) {
	savings, err := svc.GetSavings()
	if err != nil || len(savings) == 0 {
		b.send(chatID, tgbotapi.NewMessage(chatID, "üòî –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫–æ–ø–∏–ª–æ–∫ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è. –°–æ–∑–¥–∞–π—Ç–µ –æ–¥–Ω—É –≤ —Ä–∞–∑–¥–µ–ª–µ ¬´–ù–∞–∫–æ–ø–ª–µ–Ω–∏—è¬ª!"))
		return
	}

	var rows [][]tgbotapi.InlineKeyboardButton
	for _, s := range savings {
		rows = append(rows, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(fmt.Sprintf("üíµ %s", s.Name), fmt.Sprintf("add_to_saving_%d", s.ID)),
		))
	}
	rows = append(rows, tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("‚óÄÔ∏è –û—Ç–º–µ–Ω–∞", "cancel"),
	))

	msg := tgbotapi.NewMessage(chatID, "üéØ –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ø–∏–ª–∫—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:")
	msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(rows...)
	b.send(chatID, msg)
}

func (b *Bot) createSavingsKeyboard() tgbotapi.InlineKeyboardMarkup {
	return tgbotapi.NewInlineKeyboardMarkup(
		[]tgbotapi.InlineKeyboardButton{
			tgbotapi.NewInlineKeyboardButtonData("‚ûï –ù–æ–≤–∞—è –∫–æ–ø–∏–ª–∫–∞", "create_saving"),
		},
		[]tgbotapi.InlineKeyboardButton{
			tgbotapi.NewInlineKeyboardButtonData("üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å", "add_to_saving"),
		},
		[]tgbotapi.InlineKeyboardButton{
			tgbotapi.NewInlineKeyboardButtonData("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "savings_stats"),
		},
		[]tgbotapi.InlineKeyboardButton{
			tgbotapi.NewInlineKeyboardButtonData("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", "manage_savings"),
		},
		[]tgbotapi.InlineKeyboardButton{
			tgbotapi.NewInlineKeyboardButtonData("‚óÄÔ∏è –ù–∞–∑–∞–¥", "main_menu"),
		},
	)
}

func (b *Bot) showSavingsManagement(chatID int64, svc *service.FinanceService) {
	savings, err := svc.GetSavings()
	if err != nil {
		b.sendError(chatID, err)
		return
	}

	if len(savings) == 0 {
		b.send(chatID, tgbotapi.NewMessage(chatID, "üòî –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫–æ–ø–∏–ª–æ–∫ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."))
		return
	}

	var rows [][]tgbotapi.InlineKeyboardButton
	for _, s := range savings {
		rows = append(rows, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(s.Name, CallbackEditSaving+strconv.Itoa(s.ID)),
		))
	}

	rows = append(rows, tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("‚óÄÔ∏è –ù–∞–∑–∞–¥", "show_savings"),
	))

	msg := tgbotapi.NewMessage(chatID, "‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–ø–∏–ª–æ–∫</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ø–∏–ª–∫—É:")
	msg.ParseMode = "HTML"
	msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(rows...)
	b.send(chatID, msg)
}

func (b *Bot) showSavingActions(chatID int64, savingID int, svc *service.FinanceService) {
	saving, err := svc.GetSavingByID(savingID)
	if err != nil {
		b.sendError(chatID, fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–ø–∏–ª–∫—É: %v", err))
		return
	}

	formattedAmount := b.formatCurrency(saving.Amount, chatID)
	msgText := fmt.Sprintf("üìå <b>%s</b>\n–¢–µ–∫—É—â–∞—è —Å—É–º–º–∞: %s", saving.Name, formattedAmount)
	if saving.Goal != nil {
		progress := saving.Progress()
		formattedGoal := b.formatCurrency(*saving.Goal, chatID)
		msgText += fmt.Sprintf("\n–¶–µ–ª—å: %s (%.1f%%)", formattedGoal, progress)
	}
	if saving.Comment != "" {
		msgText += fmt.Sprintf("\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: %s", saving.Comment)
	}

	msg := tgbotapi.NewMessage(chatID, msgText)
	msg.ParseMode = "HTML"
	msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚ûï –ü–æ–ø–æ–ª–Ω–∏—Ç—å", fmt.Sprintf("saving_add_%d", savingID)),
			tgbotapi.NewInlineKeyboardButtonData("‚ûñ –°–Ω—è—Ç—å", fmt.Sprintf("saving_withdraw_%d", savingID)),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚úèÔ∏è –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å", fmt.Sprintf("saving_rename_%d", savingID)),
			tgbotapi.NewInlineKeyboardButtonData("üóë –£–¥–∞–ª–∏—Ç—å", fmt.Sprintf("saving_delete_%d", savingID)),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚óÄÔ∏è –ù–∞–∑–∞–¥", "savings_list"),
		),
	)

	if _, err := b.bot.Send(msg); err != nil {
		logger.LogError(chatID, fmt.Sprintf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è showSavingActions: %v", err))
		b.sendError(chatID, err)
		return
	}
}

func (b *Bot) handleDeleteSaving(chatID int64, savingID int, messageID int, svc *service.FinanceService) {
	err := svc.DeleteSaving(savingID)
	if err != nil {
		b.sendError(chatID, err)
		return
	}

	edit := tgbotapi.NewEditMessageTextAndMarkup(
		chatID,
		messageID,
		"‚úÖ –ö–æ–ø–∏–ª–∫–∞ —É–¥–∞–ª–µ–Ω–∞!",
		tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("‚óÄÔ∏è –ö —Å–ø–∏—Å–∫—É –∫–æ–ø–∏–ª–æ–∫", "manage_savings"),
			),
		),
	)
	b.send(chatID, edit)
}

func (b *Bot) handleClearSaving(chatID int64, savingID int, messageID int, svc *service.FinanceService) {
	err := svc.UpdateSavingAmount(savingID, 0)
	if err != nil {
		b.sendError(chatID, err)
		return
	}

	edit := tgbotapi.NewEditMessageTextAndMarkup(
		chatID,
		messageID,
		"‚úÖ –ö–æ–ø–∏–ª–∫–∞ –æ—á–∏—â–µ–Ω–∞!",
		tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("‚óÄÔ∏è –ö —Å–ø–∏—Å–∫—É –∫–æ–ø–∏–ª–æ–∫", "manage_savings"),
			),
		),
	)
	b.send(chatID, edit)
}

func (b *Bot) initBasicCategories(user *repository.User) {
	basicCategories := []struct{ name, typ string }{
		{"üçé –ü—Ä–æ–¥—É–∫—Ç—ã", "expense"},
		{"üöó –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç", "expense"},
		{"üè† –ñ–ö–•", "expense"},
		{"üíº –ó–∞—Ä–ø–ª–∞—Ç–∞", "income"},
		{"üéâ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è", "expense"},
	}

	exists, _ := b.repo.GetCategories(user.ID)
	wrap := map[string]bool{}
	for _, c := range exists {
		wrap[c.Name] = true
	}

	for _, category := range basicCategories {
		if !wrap[category.name] {
			if _, err := b.repo.CreateCategory(user.ID, repository.Category{
				Name: category.name,
				Type: category.typ,
			}); err != nil {
				log.Println("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:", err)
			}
		}
	}
}

func (b *Bot) showSavingTips(chatID int64) {
	tips := `üí° <b>11 –ø—Ä–∏—á–∏–Ω –≤–µ—Å—Ç–∏ —É—á–µ—Ç —Ñ–∏–Ω–∞–Ω—Å–æ–≤</b>

üëã –ü—Ä–∏–≤–µ—Ç! –ó–Ω–∞—é, —É—á–µ—Ç —Ñ–∏–Ω–∞–Ω—Å–æ–≤ –º–æ–∂–µ—Ç –∑–≤—É—á–∞—Ç—å –∫–∞–∫ —á—Ç–æ-—Ç–æ —Å–∫—É—á–Ω–æ–µ, –±—É–¥—Ç–æ –Ω—É–∂–Ω–æ —Å–∏–¥–µ—Ç—å —Å –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–æ–º –∏ –≤–æ—Ä—á–∞—Ç—å –Ω–∞–¥ –∫–∞–∂–¥–æ–π –º–µ–ª–æ—á—å—é. üòÖ –ù–æ –Ω–∞ –¥–µ–ª–µ —ç—Ç–æ –ø—Ä–æ –∫–æ–Ω—Ç—Ä–æ–ª—å, —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –∏ –ø—É—Ç—å –∫ —Ç–≤–æ–∏–º –º–µ—á—Ç–∞–º! –í–æ—Ç 11 –ø—Ä–∏—á–∏–Ω, –ø–æ—á–µ–º—É —É—á–µ—Ç —Ñ–∏–Ω–∞–Ω—Å–æ–≤ ‚Äî —ç—Ç–æ —Ç–≤–æ–π –ª—É—á—à–∏–π –¥—Ä—É–≥:

1. üïµÔ∏è‚Äç‚ôÇÔ∏è <b>–û–±–Ω–∞—Ä—É–∂–∏—Ç—å "—É—Ç–µ—á–∫–∏" –±—é–¥–∂–µ—Ç–∞</b>
–ú–µ–ª–∫–∏–µ —Ç—Ä–∞—Ç—ã ‚Äî –∫–æ—Ñ–µ, –ø–æ–¥–ø–∏—Å–∫–∏, "–Ω—É–∂–Ω—ã–µ" –≤–µ—â–∏—á–∫–∏ ‚Äî –Ω–µ–∑–∞–º–µ—Ç–Ω–æ —Å—ä–µ–¥–∞—é—Ç –±—é–¥–∂–µ—Ç. –£—á–µ—Ç –ø–æ–∫–∞–∂–µ—Ç, —Å–∫–æ–ª—å–∫–æ —Ç—ã –ø–æ—Ç—Ä–∞—Ç–∏–ª –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É –µ–¥—ã –∏–ª–∏ —Å–ø–æ–Ω—Ç–∞–Ω–Ω—ã–µ –ø–æ–∫—É–ø–∫–∏. –ù–∞–ø—Ä–∏–º–µ—Ä, 5 000 ‚ÇΩ –≤ –º–µ—Å—è—Ü –Ω–∞ –∫–æ—Ñ–µ? –≠—Ç–æ –ø–∞—Ä–∞ –∫—Ä—É—Ç—ã—Ö –∫—Ä–æ—Å—Å–æ–≤–æ–∫ –∑–∞ –≥–æ–¥! –£–∑–Ω–∞–π, –≥–¥–µ —É—Ç–µ–∫–∞—é—Ç –¥–µ–Ω—å–≥–∏, –∏ –Ω–∞–ø—Ä–∞–≤—å –∏—Ö –Ω–∞ —á—Ç–æ-—Ç–æ –≤–∞–∂–Ω–æ–µ. ü•ê

2. ü§î <b>–†–∞–∑–æ–±—Ä–∞—Ç—å—Å—è, –∫—É–¥–∞ —É—Ö–æ–¥—è—Ç –¥–µ–Ω—å–≥–∏</b>
–ö –∫–æ–Ω—Ü—É –º–µ—Å—è—Ü–∞ –∫–∞–∂–µ—Ç—Å—è, —á—Ç–æ –¥–µ–Ω—å–≥–∏ –ø—Ä–æ—Å—Ç–æ –∏—Å—á–µ–∑–ª–∏? –£—á–µ—Ç –¥–∞–µ—Ç —è—Å–Ω—É—é –∫–∞—Ä—Ç–∏–Ω—É: 25% –Ω–∞ –∞—Ä–µ–Ω–¥—É, 15% –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç—ã, 10% –Ω–∞ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è. –¢—ã –≤–∏–¥–∏—à—å, —Å–∫–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω–æ —É—Ö–æ–¥–∏—Ç –Ω–∞ –∫–∞–∂–¥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –∏ –º–æ–∂–µ—à—å –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –±—é–¥–∂–µ—Ç –±–µ–∑ —Å—é—Ä–ø—Ä–∏–∑–æ–≤. –ë–æ–ª—å—à–µ –Ω–∏–∫–∞–∫–æ–≥–æ "–≥–¥–µ –º–æ–∏ –¥–µ–Ω—å–≥–∏?"! üìä

3. üßò‚Äç‚ôÄÔ∏è <b>–ò–∑–±–∞–≤–∏—Ç—å—Å—è –æ—Ç —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π —Ç—Ä–µ–≤–æ–≥–∏</b>
–ù–µ –∑–Ω–∞—Ç—å, —Ö–≤–∞—Ç–∏—Ç –ª–∏ –¥–µ–Ω–µ–≥ –¥–æ –∑–∞—Ä–ø–ª–∞—Ç—ã, ‚Äî —ç—Ç–æ —Å—Ç—Ä–µ—Å—Å. –£—á–µ—Ç –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–≤–æ–∏ –¥–æ—Ö–æ–¥—ã, —Ä–∞—Å—Ö–æ–¥—ã –∏ –æ—Å—Ç–∞—Ç–æ–∫. –ó–Ω–∞—è, —á—Ç–æ —É —Ç–µ–±—è –µ—Å—Ç—å 10 000 ‚ÇΩ –Ω–∞ –¥–≤–µ –Ω–µ–¥–µ–ª–∏, —Ç—ã —á—É–≤—Å—Ç–≤—É–µ—à—å —Å–µ–±—è —É–≤–µ—Ä–µ–Ω–Ω–µ–µ. –≠—Ç–æ –∫–∞–∫ –∫–∞—Ä—Ç–∞ –≤ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–∏ ‚Äî —Ç—ã –≤—Å–µ–≥–¥–∞ –∑–Ω–∞–µ—à—å, –≥–¥–µ –Ω–∞—Ö–æ–¥–∏—à—å—Å—è. –°–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ! üòå

4. üé† <b>–ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å –¥–æ–ª–≥–æ–≤—É—é —Å–ø–∏—Ä–∞–ª—å</b>
–ö—Ä–µ–¥–∏—Ç–∫–∏ –∏ –∑–∞–π–º—ã –º–æ–≥—É—Ç –Ω–µ–∑–∞–º–µ—Ç–Ω–æ –∑–∞—Ç—è–Ω—É—Ç—å, –µ—Å–ª–∏ —Ç—Ä–∞—Ç—ã –æ–ø–µ—Ä–µ–∂–∞—é—Ç –¥–æ—Ö–æ–¥—ã. –£—á–µ—Ç –ø–æ–∫–∞–∂–µ—Ç, –µ—Å–ª–∏ —Ç—ã —Ç—Ä–∞—Ç–∏—à—å –±–æ–ª—å—à–µ, —á–µ–º –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–µ—à—å. –ù–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ 30% –¥–æ—Ö–æ–¥–∞ —É—Ö–æ–¥–∏—Ç –Ω–∞ –≤—ã–ø–ª–∞—Ç—ã –ø–æ –∫—Ä–µ–¥–∏—Ç–∞–º, —ç—Ç–æ —Å–∏–≥–Ω–∞–ª –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–∏–≤—ã—á–∫–∏. –£—á–µ—Ç –ø–æ–º–æ–≥–∞–µ—Ç –∂–∏—Ç—å –ø–æ —Å—Ä–µ–¥—Å—Ç–≤–∞–º –∏ –∏–∑–±–µ–≥–∞—Ç—å –¥–æ–ª–≥–æ–≤. üí≥

5. ü•≥ <b>–ë–∞–ª–æ–≤–∞—Ç—å —Å–µ–±—è –±–µ–∑ —á—É–≤—Å—Ç–≤–∞ –≤–∏–Ω—ã</b>
–ö–æ–≥–¥–∞ —Ñ–∏–Ω–∞–Ω—Å—ã –ø–æ–¥ –∫–æ–Ω—Ç—Ä–æ–ª–µ–º, —Ç—ã –º–æ–∂–µ—à—å –≤—ã–¥–µ–ª–∏—Ç—å –±—é–¥–∂–µ—Ç –Ω–∞ —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏—è ‚Äî –Ω–æ–≤—ã–π –≥–∞–¥–∂–µ—Ç, –ø–æ—Ö–æ–¥ –≤ –∫–∞—Ñ–µ –∏–ª–∏ —Å–ø–∞. –£—á–µ—Ç –ø–æ–∑–≤–æ–ª—è–µ—Ç –∑–∞—Ä–∞–Ω–µ–µ –æ—Ç–ª–æ–∂–∏—Ç—å 2 000 ‚ÇΩ –Ω–∞ "—Ä–∞–¥–æ—Å—Ç–∏", –∏ —Ç—ã –Ω–∞—Å–ª–∞–∂–¥–∞–µ—à—å—Å—è –∏–º–∏, –Ω–µ –ø–µ—Ä–µ–∂–∏–≤–∞—è, —á—Ç–æ –ø—Ä–æ–±–∏–ª –¥—ã—Ä—É –≤ –±—é–¥–∂–µ—Ç–µ. –ñ–∏–≤–∏ —è—Ä–∫–æ, –Ω–æ –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ! üéâ

6. ‚ú® <b>–ü—Ä–µ–≤—Ä–∞—Ç–∏—Ç—å –º–µ—á—Ç—ã –≤ —Ä–µ–∞–ª—å–Ω—ã–µ —Ü–µ–ª–∏</b>
–ú–µ—á—Ç–∞–µ—à—å –æ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–∏ –∏–ª–∏ –Ω–æ–≤–æ–º –Ω–æ—É—Ç–±—É–∫–µ? –£—á–µ—Ç –¥–µ–ª–∞–µ—Ç –º–µ—á—Ç—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏. –í–º–µ—Å—Ç–æ "—Ö–æ—á—É –Ω–∞ –ë–∞–ª–∏" —Ç—ã –≤–∏–¥–∏—à—å: "–ù—É–∂–Ω–æ 80 000 ‚ÇΩ, –æ—Ç–∫–ª–∞–¥—ã–≤–∞—é 8 000 ‚ÇΩ –≤ –º–µ—Å—è—Ü, —á–µ—Ä–µ–∑ 10 –º–µ—Å—è—Ü–µ–≤ ‚Äî —á–µ–º–æ–¥–∞–Ω –≤ —Ä—É–∫–∏!" –¶–∏—Ñ—Ä—ã –ø—Ä–µ–≤—Ä–∞—â–∞—é—Ç –∂–µ–ª–∞–Ω–∏—è –≤ –ø–ª–∞–Ω, –∫–æ—Ç–æ—Ä—ã–π –ª–µ–≥–∫–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å. üèùÔ∏è

7. üí∞ <b>–ù–∞–π—Ç–∏ —Å–∫—Ä—ã—Ç—ã–µ —Ä–µ—Å—É—Ä—Å—ã –¥–ª—è —Ü–µ–ª–µ–π</b>
–£—á–µ—Ç –ø–æ–º–æ–≥–∞–µ—Ç –æ–±–Ω–∞—Ä—É–∂–∏—Ç—å, –≥–¥–µ –º–æ–∂–Ω–æ —Å—ç–∫–æ–Ω–æ–º–∏—Ç—å. –ù–∞–ø—Ä–∏–º–µ—Ä, —Å–æ–∫—Ä–∞—Ç–∏–≤ —Ç—Ä–∞—Ç—ã –Ω–∞ —Ç–∞–∫—Å–∏ –Ω–∞ 3 000 ‚ÇΩ –≤ –º–µ—Å—è—Ü, —Ç—ã –º–æ–∂–µ—à—å –æ—Ç–ª–æ–∂–∏—Ç—å —ç—Ç–∏ –¥–µ–Ω—å–≥–∏ –Ω–∞ –Ω–æ–≤—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω –∏–ª–∏ –∫—É—Ä—Å –æ–±—É—á–µ–Ω–∏—è. –ê–Ω–∞–ª–∏–∑ —Ç—Ä–∞—Ç –ø–æ–¥—Å–∫–∞–∑—ã–≤–∞–µ—Ç, –∫–∞–∫ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±—é–¥–∂–µ—Ç –±–µ–∑ –ª–∏—à–µ–Ω–∏–π, —á—Ç–æ–±—ã –±—ã—Å—Ç—Ä–µ–µ –¥–æ—Å—Ç–∏—á—å –º–µ—á—Ç—ã. üöÄ

8. üìà <b>–ú–æ—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å–≤–æ–∏–º –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º</b>
–í–∏–¥–µ—Ç—å, –∫–∞–∫ —Ä–∞—Å—Ç—É—Ç –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –∏–ª–∏ —É–º–µ–Ω—å—à–∞–µ—Ç—Å—è –¥–æ–ª–≥, ‚Äî —ç—Ç–æ –∫–∞–∫ –ø—Ä–æ—Ö–æ–¥–∏—Ç—å —É—Ä–æ–≤–Ω–∏ –≤ –∏–≥—Ä–µ! –ö–∞–∂–¥—ã–π –º–µ—Å—è—Ü —Ç–≤–æ—è –∫–æ–ø–∏–ª–∫–∞ –Ω–∞ –º–∞—à–∏–Ω—É —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ 15 000 ‚ÇΩ, –∏–ª–∏ –¥–æ–ª–≥ –ø–æ –∫—Ä–µ–¥–∏—Ç–∫–µ —Å–æ–∫—Ä–∞—â–∞–µ—Ç—Å—è –Ω–∞ 5 000 ‚ÇΩ. –≠—Ç–æ –≤–¥–æ—Ö–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –∏ –¥–µ–ª–∞–µ—Ç —Ñ–∏–Ω–∞–Ω—Å—ã —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–º–∏. üí™

9. ‚è≥<b> –û—Ü–µ–Ω–∏—Ç—å —Ü–µ–Ω–Ω–æ—Å—Ç—å —Å–≤–æ–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏</b>
–ü–æ—Å—á–∏—Ç–∞–π, —Å–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç —Ç–≤–æ–π —á–∞—Å —Ä–∞–±–æ—Ç—ã. –ï—Å–ª–∏ —Ç—ã –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–µ—à—å 400 ‚ÇΩ –≤ —á–∞—Å, –∞ –Ω–æ–≤—ã–π —Å–≤–∏—Ç–µ—Ä —Å—Ç–æ–∏—Ç 4 000 ‚ÇΩ, —ç—Ç–æ 10 —á–∞—Å–æ–≤ —Ç—Ä—É–¥–∞. –°—Ç–æ–∏—Ç –ª–∏ –æ–Ω —Ç–æ–≥–æ? –£—á–µ—Ç –ø–æ–º–æ–≥–∞–µ—Ç –≤–∑–≤–µ—à–∏–≤–∞—Ç—å –ø–æ–∫—É–ø–∫–∏ –∏ —Ü–µ–Ω–∏—Ç—å —Å–≤–æ–µ –≤—Ä–µ–º—è, –¥–µ–ª–∞—è —Ä–µ—à–µ–Ω–∏—è –±–æ–ª–µ–µ –æ—Å–æ–∑–Ω–∞–Ω–Ω—ã–º–∏. üï∞Ô∏è

10. ‚úÖ <b>–ü—Ä–∏–Ω–∏–º–∞—Ç—å —Ä–µ—à–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ñ–∞–∫—Ç–æ–≤</b>
–ü–æ–∫—É–ø–∞—Ç—å –¥–æ—Ä–æ–≥–æ–π –≥–∞–¥–∂–µ—Ç –∏–ª–∏ –ø–æ–¥–æ–∂–¥–∞—Ç—å? –£—á–µ—Ç –¥–∞–µ—Ç –æ—Ç–≤–µ—Ç: –µ—Å–ª–∏ –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏ —É —Ç–µ–±—è –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –≤—Å–µ–≥–æ 3 000 ‚ÇΩ –Ω–∞ –º–µ—Å—è—Ü, –ª—É—á—à–µ –æ—Ç–ª–æ–∂–∏—Ç—å. –¶–∏—Ñ—Ä—ã –Ω–µ –≤—Ä—É—Ç, –∏ —Ç—ã –º–æ–∂–µ—à—å –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Ä–µ—à–µ–Ω–∏—è, –æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –∞ –Ω–µ –Ω–∞ —ç–º–æ—Ü–∏—è—Ö. –≠—Ç–æ –∫–∞–∫ –∫–æ–º–ø–∞—Å –≤ –º–∏—Ä–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤! üß≠

11. üìä <b>–£–ø—Ä–∞–≤–ª—è—Ç—å –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω—ã–º –¥–æ—Ö–æ–¥–æ–º</b>
–î–ª—è —Ñ—Ä–∏–ª–∞–Ω—Å–µ—Ä–æ–≤, —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–æ–≤ –∏–ª–∏ –º–∞—Å—Ç–µ—Ä–æ–≤ —Å –ø–ª–∞–≤–∞—é—â–∏–º –¥–æ—Ö–æ–¥–æ–º —É—á–µ—Ç ‚Äî —Å–ø–∞—Å–µ–Ω–∏–µ. –û–Ω –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ä–µ–¥–Ω–∏–π –¥–æ—Ö–æ–¥ –∑–∞ –º–µ—Å—è—Ü, –≤—ã—è–≤–ª—è–µ—Ç —Å–µ–∑–æ–Ω–Ω—ã–µ —Å–ø–∞–¥—ã –∏ –ø–æ–º–æ–≥–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å. –ù–∞–ø—Ä–∏–º–µ—Ä, –∑–Ω–∞—è, —á—Ç–æ –≤ –¥–µ–∫–∞–±—Ä–µ –∑–∞–∫–∞–∑–æ–≤ –º–µ–Ω—å—à–µ, —Ç—ã –æ—Ç–ª–æ–∂–∏—à—å –¥–µ–Ω—å–≥–∏ –∑–∞—Ä–∞–Ω–µ–µ. –ü–æ—Ä—è–¥–æ–∫ –≤–º–µ—Å—Ç–æ —Ö–∞–æ—Å–∞! üíº

üí∏ <b>–ù–∞—á–Ω–∏ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!</b> –£—á–µ—Ç ‚Äî —ç—Ç–æ –Ω–µ –ø—Ä–æ —Å–∫—É–∫—É, –∞ –ø—Ä–æ –∫–æ–Ω—Ç—Ä–æ–ª—å –∏ —Å–≤–æ–±–æ–¥—É. –í—Å–µ–≥–æ –ø–∞—Ä–∞ –º–∏–Ω—É—Ç –≤ –¥–µ–Ω—å, –∏ —Ç–≤–æ–∏ —Ñ–∏–Ω–∞–Ω—Å—ã –ø—Ä–µ–≤—Ä–∞—Ç—è—Ç—Å—è –∏–∑ –∑–∞–≥–∞–¥–∫–∏ –≤ —á–µ—Ç–∫–∏–π –ø–ª–∞–Ω. –°–¥–µ–ª–∞–π –ø–µ—Ä–≤—ã–π —à–∞–≥ –∫ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏! üöÄ`

	msg := tgbotapi.NewMessage(chatID, tips)
	msg.ParseMode = "HTML"
	b.send(chatID, msg)
	b.sendMainMenu(chatID, "üéâ –ß—Ç–æ –¥–∞–ª—å—à–µ?")
}

func (b *Bot) showSettingsMenu(chatID int64) {
	msg := tgbotapi.NewMessage(chatID, "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n\n–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ö–æ—á–µ—à—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å:")
	msg.ParseMode = "HTML"

	keyboard := [][]tgbotapi.InlineKeyboardButton{
		{tgbotapi.NewInlineKeyboardButtonData("üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", "notification_settings")},
		{tgbotapi.NewInlineKeyboardButtonData("üìù –ö–∞—Ç–µ–≥–æ—Ä–∏–∏", "manage_categories")},
		{tgbotapi.NewInlineKeyboardButtonData("üìÖ –ü–µ—Ä–∏–æ–¥ –æ—Ç—á—ë—Ç–æ–≤", "period_settings")},
		{tgbotapi.NewInlineKeyboardButtonData("üí± –í–∞–ª—é—Ç–∞", CallbackCurrencySettings)},
		{tgbotapi.NewInlineKeyboardButtonData("üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞", "support")},
		{tgbotapi.NewInlineKeyboardButtonData("üßπ –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ", "confirm_clear_data")},
	}

	msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(keyboard...)
	b.send(chatID, msg)
}

func (b *Bot) showNotificationSettings(chatID int64) {
	user, err := b.repo.GetOrCreateUser(chatID, "", "", "")
	if err != nil {
		b.sendError(chatID, err)
		return
	}

	svc := service.NewService(b.repo, user)
	enabled, err := svc.GetNotificationsEnabled()
	if err != nil {
		b.sendError(chatID, err)
		return
	}

	status := "üîï –û—Ç–∫–ª—é—á–µ–Ω—ã"
	if enabled {
		status = "üîî –í–∫–ª—é—á–µ–Ω—ã"
	}

	msg := tgbotapi.NewMessage(chatID,
		fmt.Sprintf("üîî <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</b>\n\n–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: %s\n\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", status))
	msg.ParseMode = "HTML"
	msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(
		[]tgbotapi.InlineKeyboardButton{
			tgbotapi.NewInlineKeyboardButtonData("üîî –í–∫–ª—é—á–∏—Ç—å", "enable_notifications"),
		},
		[]tgbotapi.InlineKeyboardButton{
			tgbotapi.NewInlineKeyboardButtonData("üîï –û—Ç–∫–ª—é—á–∏—Ç—å", "disable_notifications"),
		},
		[]tgbotapi.InlineKeyboardButton{
			tgbotapi.NewInlineKeyboardButtonData("‚óÄÔ∏è –í –º–µ–Ω—é", "settings_back"),
		},
	)
	b.send(chatID, msg)
}

func (b *Bot) showCategoryManagement(chatID int64, svc *service.FinanceService) {
	categories, err := svc.GetCategories()
	if err != nil {
		b.sendError(chatID, err)
		return
	}

	if len(categories) == 0 {
		b.send(chatID, tgbotapi.NewMessage(chatID, "üòî –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é –≤ –º–µ–Ω—é!"))
		return
	}

	var rows [][]tgbotapi.InlineKeyboardButton
	for _, cat := range categories {
		btnText := fmt.Sprintf("%s (%s)", cat.Name, cat.Type)
		rows = append(rows, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(btnText, CallbackEditCategory+strconv.Itoa(cat.ID)),
		))
	}

	rows = append(rows, tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("‚óÄÔ∏è –í –º–µ–Ω—é", "settings_back"),
	))

	msg := tgbotapi.NewMessage(chatID, "üìù <b>–ö–∞—Ç–µ–≥–æ—Ä–∏–∏</b>\n\n–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
	msg.ParseMode = "HTML"
	msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(rows...)
	b.send(chatID, msg)
}

func (b *Bot) showSupportInfo(chatID int64) {
	supportText := `üÜò <b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞</b>

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`

	msg := tgbotapi.NewMessage(chatID, supportText)
	msg.ParseMode = "HTML"
	msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚úâÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É", CallbackWriteSupport),
			tgbotapi.NewInlineKeyboardButtonData("‚ùì FAQ", CallbackFAQ),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚óÄÔ∏è –ù–∞–∑–∞–¥", "settings_back"),
		),
	)
	b.send(chatID, msg)
}

func (b *Bot) showCurrencyMenu(chatID int64) {
	user, err := b.repo.GetOrCreateUser(chatID, "", "", "")
	if err != nil {
		b.sendError(chatID, err)
		return
	}

	currentCurrency, _ := b.repo.GetUserCurrency(user.ID)

	msg := tgbotapi.NewMessage(chatID, fmt.Sprintf("üí± –¢–µ–∫—É—â–∞—è –≤–∞–ª—é—Ç–∞: %s\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –≤–∞–ª—é—Ç—É:", currentCurrency))

	keyboard := [][]tgbotapi.InlineKeyboardButton{
		{tgbotapi.NewInlineKeyboardButtonData(fmt.Sprintf("üá∑üá∫ RUB (–†—É–±–ª–∏)%s", b.getCurrencyCheckmark(currentCurrency, CurrencyRUB)), CallbackSetCurrency+CurrencyRUB)},
		{tgbotapi.NewInlineKeyboardButtonData(fmt.Sprintf("üá∫üá∏ USD (–î–æ–ª–ª–∞—Ä—ã)%s", b.getCurrencyCheckmark(currentCurrency, CurrencyUSD)), CallbackSetCurrency+CurrencyUSD)},
		{tgbotapi.NewInlineKeyboardButtonData(fmt.Sprintf("üá™üá∫ EUR (–ï–≤—Ä–æ)%s", b.getCurrencyCheckmark(currentCurrency, CurrencyEUR)), CallbackSetCurrency+CurrencyEUR)},
		{tgbotapi.NewInlineKeyboardButtonData("‚óÄÔ∏è –ù–∞–∑–∞–¥", "settings_back")},
	}

	msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(keyboard...)
	b.send(chatID, msg)
}

func (b *Bot) formatCurrency(amount float64, chatID int64) string {
	user, err := b.repo.GetOrCreateUser(chatID, "", "", "")
	if err != nil {
		return fmt.Sprintf("%.2f ‚ÇΩ", amount) // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é RUB
	}

	currency, err := b.repo.GetUserCurrency(user.ID)
	if err != nil {
		return fmt.Sprintf("%.2f ‚ÇΩ", amount)
	}

	switch currency {
	case CurrencyRUB:
		return fmt.Sprintf("%.2f ‚ÇΩ", amount)
	case CurrencyUSD:
		return fmt.Sprintf("$%.2f", amount)
	case CurrencyEUR:
		return fmt.Sprintf("‚Ç¨%.2f", amount)
	default:
		return fmt.Sprintf("%.2f %s", amount, currency)
	}
}

func (b *Bot) getCurrencyCheckmark(current, selected string) string {
	if current == selected {
		return " ‚úÖ"
	}
	return ""
}

func (b *Bot) handleSetCurrency(chatID int64, currency string) {
	user, err := b.repo.GetOrCreateUser(chatID, "", "", "")
	if err != nil {
		b.sendError(chatID, err)
		return
	}

	if err := b.repo.SetUserCurrency(user.ID, currency); err != nil {
		b.sendError(chatID, err)
		return
	}

	symbols := map[string]string{
		CurrencyRUB: "‚ÇΩ",
		CurrencyUSD: "$",
		CurrencyEUR: "‚Ç¨",
	}

	b.send(chatID, tgbotapi.NewMessage(chatID,
		fmt.Sprintf("‚úÖ –í–∞–ª—é—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ %s %s", currency, symbols[currency])))
	b.showSettingsMenu(chatID)
}

func (b *Bot) showCategoryActions(chatID int64, categoryID int, svc *service.FinanceService) {
	category, err := svc.GetCategoryByID(categoryID)
	if err != nil {
		b.sendError(chatID, err)
		return
	}

	msgText := fmt.Sprintf("üìù <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> %s\n<b>–¢–∏–ø:</b> %s\n\n–ß—Ç–æ —Å–¥–µ–ª–∞—Ç—å?", category.Name, category.Type)

	msg := tgbotapi.NewMessage(chatID, msgText)
	msg.ParseMode = "HTML"
	msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚úèÔ∏è –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å", CallbackRenameCategory+strconv.Itoa(categoryID)),
			tgbotapi.NewInlineKeyboardButtonData("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", CallbackDeleteCategory+strconv.Itoa(categoryID)),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚óÄÔ∏è –ù–∞–∑–∞–¥", "manage_categories"),
		),
	)
	b.send(chatID, msg)
}

func (b *Bot) showReportPeriodMenu(chatID int64) {
	msg := tgbotapi.NewMessage(chatID, "üìä –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:")
	msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–î–µ–Ω—å", "stats_day"),
			tgbotapi.NewInlineKeyboardButtonData("–ù–µ–¥–µ–ª—è", "stats_week"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–ú–µ—Å—è—Ü", "stats_month"),
			tgbotapi.NewInlineKeyboardButtonData("–ì–æ–¥", "stats_year"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚óÄÔ∏è –ù–∞–∑–∞–¥", "main_menu"),
		),
	)
	b.send(chatID, msg)
}

func (b *Bot) showSavingsStats(chatID int64, svc *service.FinanceService) {
	savings, err := svc.GetSavings()
	if err != nil {
		b.sendError(chatID, err)
		return
	}

	var totalSaved, totalGoal float64
	var msgText strings.Builder
	msgText.WriteString("üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–ø–∏–ª–æ–∫*\n\n")

	for _, s := range savings {
		if s.Goal != nil {
			totalSaved += s.Amount
			totalGoal += *s.Goal
			progress := b.renderProgressBar(s.Progress(), 10)

			formattedAmount := b.formatCurrency(s.Amount, chatID)
			formattedGoal := b.formatCurrency(*s.Goal, chatID)

			msgText.WriteString(fmt.Sprintf(
				"üîπ *%s*\n"+
					"‚î£ –ù–∞–∫–æ–ø–ª–µ–Ω–æ: *%s*\n"+
					"‚î£ –¶–µ–ª—å: *%s*\n"+
					"‚îó –ü—Ä–æ–≥—Ä–µ—Å—Å: %s\n\n",
				s.Name, formattedAmount, formattedGoal, progress,
			))
		}
	}

	msg := tgbotapi.NewMessage(chatID, msgText.String())
	msg.ParseMode = "Markdown"
	msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–æ–ø–∏–ª–∫–∞–º", "show_savings"),
		),
	)
	b.send(chatID, msg)
}

func (b *Bot) showTransactionHistory(chatID int64, svc *service.FinanceService) {
	end := time.Now()
	start := end.AddDate(0, -1, 0)

	transactions, err := svc.GetTransactionsForPeriod(start, end)
	if err != nil {
		b.sendError(chatID, err)
		return
	}

	var msgText strings.Builder
	msgText.WriteString("üìú <b>–ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π</b>\n\n")

	for i, t := range transactions {
		formattedDate := t.Date.Format("02.01.2006")
		formattedAmount := b.formatCurrency(math.Abs(t.Amount), chatID)

		operationIcon := "üìà"
		operationType := "–î–æ—Ö–æ–¥"
		if t.Amount < 0 {
			operationIcon = "üìâ"
			operationType = "–†–∞—Å—Ö–æ–¥"
		}

		msgText.WriteString(fmt.Sprintf(
			"<b>%d. %s %s %s</b>\n"+
				"‚î£ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: %s\n"+
				"‚î£ –°—É–º–º–∞: <code>%s</code>\n",
			i+1, formattedDate, operationIcon, operationType,
			t.CategoryName, formattedAmount))

		if t.Comment != "" {
			msgText.WriteString(fmt.Sprintf("‚î£ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: %s\n", t.Comment))
		}
		msgText.WriteString("\n")
	}

	msg := tgbotapi.NewMessage(chatID, msgText.String())
	msg.ParseMode = tgbotapi.ModeHTML
	msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üîô –ù–∞–∑–∞–¥", "stats_back"),
		),
	)
	b.send(chatID, msg)
}

func (b *Bot) createCategoryKeyboard(chatID int64, typ string, prefix string) tgbotapi.InlineKeyboardMarkup {
	user, err := b.repo.GetOrCreateUser(chatID, "", "", "")
	if err != nil {
		return tgbotapi.NewInlineKeyboardMarkup()
	}

	svc := service.NewService(b.repo, user)
	categories, err := svc.GetCategories()
	if err != nil {
		return tgbotapi.NewInlineKeyboardMarkup()
	}

	var rows [][]tgbotapi.InlineKeyboardButton
	for _, cat := range categories {
		if cat.Type == typ {
			rows = append(rows, tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData(cat.Name, prefix+"_"+strconv.Itoa(cat.ID)),
			))
		}
	}

	rows = append(rows, tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("üîô –ù–∞–∑–∞–¥", "edit_"+strconv.Itoa(userStates[chatID].TempCategoryID)),
	))

	return tgbotapi.NewInlineKeyboardMarkup(rows...)
}

func (b *Bot) showSavings(chatID int64, svc *service.FinanceService) {
	savings, err := svc.GetSavings()
	if err != nil {
		b.sendError(chatID, err)
		return
	}

	var msgText strings.Builder
	msgText.WriteString("üíµ *–í–∞—à–∏ –∫–æ–ø–∏–ª–∫–∏*\n\n")

	if len(savings) == 0 {
		msgText.WriteString("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫–æ–ø–∏–ª–æ–∫. –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é!")
	} else {
		for _, s := range savings {
			progress := ""
			formattedAmount := b.formatCurrency(s.Amount, chatID)
			if s.Goal != nil {
				progress = b.renderProgressBar(s.Progress(), 10)
				formattedGoal := b.formatCurrency(*s.Goal, chatID)
				msgText.WriteString(fmt.Sprintf(
					"üîπ *%s*\n"+
						"‚î£ –ù–∞–∫–æ–ø–ª–µ–Ω–æ: *%s*\n"+
						"‚î£ –¶–µ–ª—å: *%s*\n"+
						"‚îó –ü—Ä–æ–≥—Ä–µ—Å—Å: %s\n\n",
					s.Name, formattedAmount, formattedGoal, progress,
				))
			} else {
				msgText.WriteString(fmt.Sprintf(
					"üîπ *%s*\n"+
						"‚î£ –ù–∞–∫–æ–ø–ª–µ–Ω–æ: *%s*\n\n",
					s.Name, formattedAmount,
				))
			}
		}
	}

	msg := tgbotapi.NewMessage(chatID, msgText.String())
	msg.ParseMode = "Markdown"
	msg.ReplyMarkup = b.createSavingsKeyboard()
	b.send(chatID, msg)
}

func (b *Bot) showDailyReport(chatID int64, svc *service.FinanceService) {
	now := time.Now()
	start := time.Date(now.Year(), now.Month(), now.Day(), 0, 0, 0, 0, now.Location())
	end := start.AddDate(0, 0, 1)
	b.generatePeriodReport(chatID, svc, start, end, "–¥–µ–Ω—å")
}

func (b *Bot) showWeeklyReport(chatID int64, svc *service.FinanceService) {
	now := time.Now()
	start := now.AddDate(0, 0, -6)
	end := now
	b.generatePeriodReport(chatID, svc, start, end, "–Ω–µ–¥–µ–ª—é")
}

func (b *Bot) showMonthlyReport(chatID int64, svc *service.FinanceService) {
	user, err := b.repo.GetOrCreateUser(chatID, "", "", "")
	if err != nil {
		b.sendError(chatID, err)
		return
	}
	now := time.Now()
	startDay := user.PeriodStartDay
	var start, end time.Time
	if startDay <= now.Day() {
		start = time.Date(now.Year(), now.Month(), startDay, 0, 0, 0, 0, now.Location())
		end = start.AddDate(0, 1, 0)
	} else {
		prevMonth := now.AddDate(0, -1, 0)
		start = time.Date(prevMonth.Year(), prevMonth.Month(), startDay, 0, 0, 0, 0, now.Location())
		end = time.Date(now.Year(), now.Month(), startDay, 0, 0, 0, 0, now.Location())
	}
	b.generatePeriodReport(chatID, svc, start, end, "–º–µ—Å—è—Ü")
}

func (b *Bot) showYearlyReport(chatID int64, svc *service.FinanceService) {
	user, err := b.repo.GetOrCreateUser(chatID, "", "", "")
	if err != nil {
		b.sendError(chatID, err)
		return
	}
	now := time.Now()
	startDay := user.PeriodStartDay
	var start, end time.Time
	if now.Month() > 1 || (now.Month() == 1 && now.Day() >= startDay) {
		start = time.Date(now.Year(), 1, startDay, 0, 0, 0, 0, now.Location())
		end = start.AddDate(1, 0, 0)
	} else {
		start = time.Date(now.Year()-1, 1, startDay, 0, 0, 0, 0, now.Location())
		end = time.Date(now.Year(), 1, startDay, 0, 0, 0, 0, now.Location())
	}
	b.generatePeriodReport(chatID, svc, start, end, "–≥–æ–¥")
}

func (b *Bot) generatePeriodReport(chatID int64, svc *service.FinanceService, start, end time.Time, periodName string) {
	trans, err := svc.GetTransactionsForPeriod(start, end)
	if err != nil {
		logger.LogError(chatID, fmt.Sprintf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è –æ—Ç—á–µ—Ç–∞: %v", err))
		b.sendError(chatID, err)
		return
	}

	var totalIncome, totalExpense float64
	incomeDetails := make(map[string]float64)
	expenseDetails := make(map[string]float64)

	for _, t := range trans {
		catName := t.CategoryName
		if catName == "" {
			catName = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
		}

		if t.Amount > 0 {
			totalIncome += t.Amount
			incomeDetails[catName] += t.Amount
		} else {
			amount := math.Abs(t.Amount)
			totalExpense += amount
			expenseDetails[catName] += amount
		}
	}

	msgText := strings.Builder{}
	msgText.WriteString(fmt.Sprintf("üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ %s</b>\n\n", periodName))

	formattedTotalIncome := b.formatCurrency(totalIncome, chatID)
	msgText.WriteString(fmt.Sprintf("üìà <b>–î–æ—Ö–æ–¥—ã:</b> %s\n", formattedTotalIncome))
	if len(incomeDetails) == 0 {
		msgText.WriteString("‚î£ –ù–µ—Ç –¥–æ—Ö–æ–¥–æ–≤\n")
	} else {
		for cat, amount := range incomeDetails {
			if cat == "" {
				cat = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
			}
			formattedAmount := b.formatCurrency(amount, chatID)
			msgText.WriteString(fmt.Sprintf("‚î£ %s: %s\n", cat, formattedAmount))
		}
	}

	formattedTotalExpense := b.formatCurrency(totalExpense, chatID)
	msgText.WriteString(fmt.Sprintf("\nüìâ <b>–†–∞—Å—Ö–æ–¥—ã:</b> %s\n", formattedTotalExpense))
	if len(expenseDetails) == 0 {
		msgText.WriteString("‚î£ –ù–µ—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤\n")
	} else {
		sortedCategories := sortCategoriesByAmount(expenseDetails)
		for _, cat := range sortedCategories {
			if cat == "" {
				cat = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
			}
			amount := expenseDetails[cat]
			percentage := 0.0
			if totalExpense > 0 {
				percentage = (amount / totalExpense) * 100
			}
			formattedAmount := b.formatCurrency(amount, chatID)
			msgText.WriteString(fmt.Sprintf("‚î£ %s: %s (%.1f%%)\n", cat, formattedAmount, percentage))
		}
	}

	formattedBalance := b.formatCurrency(totalIncome-totalExpense, chatID)
	msgText.WriteString(fmt.Sprintf("\nüíµ <b>–ë–∞–ª–∞–Ω—Å:</b> %s", formattedBalance))

	finalMsg := msgText.String()
	if len(finalMsg) > 4096 {
		logger.LogError(chatID, "–î–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç Telegram (4096 —Å–∏–º–≤–æ–ª–æ–≤)")
		b.sendError(chatID, fmt.Errorf("–æ—Ç—á–µ—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –º–µ–Ω—å—à–∏–π –ø–µ—Ä–∏–æ–¥"))
		return
	}

	msg := tgbotapi.NewMessage(chatID, finalMsg)
	msg.ParseMode = "HTML"
	msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚óÄÔ∏è –ù–∞–∑–∞–¥", "stats_back"),
			tgbotapi.NewInlineKeyboardButtonData("üì§ –í—ã–≥—Ä—É–∑–∏—Ç—å –æ—Ç—á–µ—Ç", fmt.Sprintf("export_report_%s_%s",
				start.Format("2006-01-02"),
				end.Format("2006-01-02"))),
		),
	)

	if _, err := b.bot.Send(msg); err != nil {
		logger.LogError(chatID, fmt.Sprintf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: %v", err))
		b.sendError(chatID, fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç: %v", err))
		return
	}

	logger.LogButtonClickByID(chatID, fmt.Sprintf("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ %s", periodName))
}

func sortCategoriesByAmount(details map[string]float64) []string {
	type kv struct {
		Key   string
		Value float64
	}

	var sorted []kv
	for k, v := range details {
		sorted = append(sorted, kv{k, v})
	}

	sort.Slice(sorted, func(i, j int) bool {
		return sorted[i].Value > sorted[j].Value
	})

	result := make([]string, len(sorted))
	for i, kv := range sorted {
		result[i] = kv.Key
	}
	return result
}

func (b *Bot) SendReminder(chatID int64) {
	msg := tgbotapi.NewMessage(chatID, `üîî <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ</b>

–ü—Ä–∏–≤–µ—Ç! –°–µ–≥–æ–¥–Ω—è —Ç—ã –Ω–µ –¥–æ–±–∞–≤–ª—è–ª(–∞) —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏. 

üí° –í–µ–¥–∏ —É—á–µ—Ç, —á—Ç–æ–±—ã –ª—É—á—à–µ —É–ø—Ä–∞–≤–ª—è—Ç—å —Ñ–∏–Ω–∞–Ω—Å–∞–º–∏! 

‚ûï –ù–∞–∂–º–∏ ¬´–î–æ–±–∞–≤–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é¬ª –∏–ª–∏ –Ω–∞–ø–∏—à–∏ —Å—É–º–º—É –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π, –Ω–∞–ø—Ä–∏–º–µ—Ä:
<code>150 —Ç–∞–∫—Å–∏</code>`)
	msg.ParseMode = "HTML"
	b.send(chatID, msg)
}

func (b *Bot) showWriteSupport(chatID int64) {
	writeText := `‚úâÔ∏è <b>–ù–∞–ø–∏—Å–∞—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É</b>

–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–ø—Ä—è–º—É—é: @LONEl1st

–ò–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ issue –Ω–∞ GitHub: https://github.com/IlyaMakar/finance_bot`

	msg := tgbotapi.NewMessage(chatID, writeText)
	msg.ParseMode = "HTML"
	msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –ø–æ–¥–¥–µ—Ä–∂–∫–µ", "support"),
		),
	)
	b.send(chatID, msg)
}

func (b *Bot) showFAQ(chatID int64) {
	faqText := `‚ùì <b>FAQ (–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã)</b>

–í–æ—Ç –æ—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ. –ï—Å–ª–∏ —á–µ–≥–æ-—Ç–æ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç, –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É!

1. <b>–ö–∞–∫ –¥–æ–±–∞–≤–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é?</b>
   - –ù–∞–∂–º–∏—Ç–µ "‚ûï –î–æ–±–∞–≤–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é" –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.
   - –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø (–î–æ—Ö–æ–¥ –∏–ª–∏ –†–∞—Å—Ö–æ–¥).
   - –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é.
   - –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ).

2. <b>–ö–∞–∫ —É–ø—Ä–∞–≤–ª—è—Ç—å –∫–æ–ø–∏–ª–∫–∞–º–∏?</b>
   - –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ "üíµ –ù–∞–∫–æ–ø–ª–µ–Ω–∏—è".
   - –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é –∫–æ–ø–∏–ª–∫—É, —É–∫–∞–∂–∏—Ç–µ –∏–º—è –∏ —Ü–µ–ª—å (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ).
   - –ü–æ–ø–æ–ª–Ω—è–π—Ç–µ, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ –∏–ª–∏ —É–¥–∞–ª—è–π—Ç–µ –∫–æ–ø–∏–ª–∫–∏.

3. <b>–ö–∞–∫ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É?</b>
   - –ù–∞–∂–º–∏—Ç–µ "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞".
   - –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥: –¥–µ–Ω—å, –Ω–µ–¥–µ–ª—è, –º–µ—Å—è—Ü, –≥–æ–¥.
   - –ë–æ—Ç –ø–æ–∫–∞–∂–µ—Ç –¥–æ—Ö–æ–¥—ã, —Ä–∞—Å—Ö–æ–¥—ã, –±–∞–ª–∞–Ω—Å –∏ –¥–µ—Ç–∞–ª–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º.

4. <b>–ö–∞–∫ –≤–∫–ª—é—á–∏—Ç—å/–æ—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è?</b>
   - –í "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏" –≤—ã–±–µ—Ä–∏—Ç–µ "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è".
   - –í–∫–ª—é—á–∏—Ç–µ –∏–ª–∏ –æ—Ç–∫–ª—é—á–∏—Ç–µ. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏—Ö–æ–¥—è—Ç –≤ 16:00, –µ—Å–ª–∏ –Ω–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞ –¥–µ–Ω—å.

5. <b>–ö–∞–∫ –∏–∑–º–µ–Ω–∏—Ç—å –≤–∞–ª—é—Ç—É?</b>
   - –í "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏" –≤—ã–±–µ—Ä–∏—Ç–µ "üí± –í–∞–ª—é—Ç–∞".
   - –í—ã–±–µ—Ä–∏—Ç–µ RUB, USD –∏–ª–∏ EUR.

6. <b>–ö–∞–∫ –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ?</b>
   - –í "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏" –Ω–∞–∂–º–∏—Ç–µ "üßπ –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ".
   - –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ ‚Äî —ç—Ç–æ —É–¥–∞–ª–∏—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏, –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –∫–æ–ø–∏–ª–∫–∏.

7. <b>–ß—Ç–æ –¥–µ–ª–∞—Ç—å, –µ—Å–ª–∏ –±–æ—Ç –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç?</b>
   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç. –ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ persists, –Ω–∞–ø–∏—à–∏—Ç–µ @LONEl1st.

8. <b>–û–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞</b>
   - –ë–æ—Ç —É–≤–µ–¥–æ–º–∏—Ç –≤–∞—Å –æ –Ω–æ–≤—ã—Ö –≤–µ—Ä—Å–∏—è—Ö. –ß–∏—Ç–∞–π—Ç–µ –æ–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –Ω–æ–≤—ã—Ö —Ñ–∏—á.

–ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –Ω–µ –ø–æ–∫—Ä—ã—Ç, –Ω–∞–ø–∏—à–∏—Ç–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É!`

	msg := tgbotapi.NewMessage(chatID, faqText)
	msg.ParseMode = "HTML"
	msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –ø–æ–¥–¥–µ—Ä–∂–∫–µ", "support"),
		),
	)
	b.send(chatID, msg)
}
